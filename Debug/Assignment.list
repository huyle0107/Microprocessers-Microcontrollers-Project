
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f8  080051f8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080051f8  080051f8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051f8  080051f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000090  08005290  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005290  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135df  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb8  00000000  00000000  00033698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018938  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011916  00000000  00000000  0004fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b298  00000000  00000000  000613de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ec676  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d08  00000000  00000000  000ec6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c70  00000000  00000000  000ed3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f38 	.word	0x08004f38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004f38 	.word	0x08004f38

0800014c <button_reading>:

// we define counter for automatically increasing the value after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {DURATION_FOR_AUTO_DECREASING, DURATION_FOR_AUTO_DECREASING, DURATION_FOR_AUTO_DECREASING, DURATION_FOR_AUTO_DECREASING};

void button_reading(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e093      	b.n	8000280 <button_reading+0x134>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	494d      	ldr	r1, [pc, #308]	; (8000294 <button_reading+0x148>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a4d      	ldr	r2, [pc, #308]	; (8000298 <button_reading+0x14c>)
 8000162:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	2b03      	cmp	r3, #3
 8000168:	d832      	bhi.n	80001d0 <button_reading+0x84>
 800016a:	a201      	add	r2, pc, #4	; (adr r2, 8000170 <button_reading+0x24>)
 800016c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000170:	08000181 	.word	0x08000181
 8000174:	08000195 	.word	0x08000195
 8000178:	080001a9 	.word	0x080001a9
 800017c:	080001bd 	.word	0x080001bd
		{
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	2102      	movs	r1, #2
 8000184:	4845      	ldr	r0, [pc, #276]	; (800029c <button_reading+0x150>)
 8000186:	f002 f877 	bl	8002278 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b41      	ldr	r3, [pc, #260]	; (8000294 <button_reading+0x148>)
 8000190:	551a      	strb	r2, [r3, r4]
				break;
 8000192:	e01e      	b.n	80001d2 <button_reading+0x86>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000194:	79fc      	ldrb	r4, [r7, #7]
 8000196:	2110      	movs	r1, #16
 8000198:	4840      	ldr	r0, [pc, #256]	; (800029c <button_reading+0x150>)
 800019a:	f002 f86d 	bl	8002278 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b3c      	ldr	r3, [pc, #240]	; (8000294 <button_reading+0x148>)
 80001a4:	551a      	strb	r2, [r3, r4]
				break;
 80001a6:	e014      	b.n	80001d2 <button_reading+0x86>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 80001a8:	79fc      	ldrb	r4, [r7, #7]
 80001aa:	2101      	movs	r1, #1
 80001ac:	483c      	ldr	r0, [pc, #240]	; (80002a0 <button_reading+0x154>)
 80001ae:	f002 f863 	bl	8002278 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	461a      	mov	r2, r3
 80001b6:	4b37      	ldr	r3, [pc, #220]	; (8000294 <button_reading+0x148>)
 80001b8:	551a      	strb	r2, [r3, r4]
				break;
 80001ba:	e00a      	b.n	80001d2 <button_reading+0x86>
			case 3:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_PEDES_GPIO_Port, BTN_PEDES_Pin);
 80001bc:	79fc      	ldrb	r4, [r7, #7]
 80001be:	2101      	movs	r1, #1
 80001c0:	4836      	ldr	r0, [pc, #216]	; (800029c <button_reading+0x150>)
 80001c2:	f002 f859 	bl	8002278 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b32      	ldr	r3, [pc, #200]	; (8000294 <button_reading+0x148>)
 80001cc:	551a      	strb	r2, [r3, r4]
				break;
 80001ce:	e000      	b.n	80001d2 <button_reading+0x86>
			default:
				break;
 80001d0:	bf00      	nop
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	4a2f      	ldr	r2, [pc, #188]	; (8000294 <button_reading+0x148>)
 80001d6:	5cd2      	ldrb	r2, [r2, r3]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	492f      	ldr	r1, [pc, #188]	; (8000298 <button_reading+0x14c>)
 80001dc:	5ccb      	ldrb	r3, [r1, r3]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d14b      	bne.n	800027a <button_reading+0x12e>
		{
			if(debounceButtonBuffer2[i] != debounceButtonBuffer3[i])
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4a2c      	ldr	r2, [pc, #176]	; (8000298 <button_reading+0x14c>)
 80001e6:	5cd2      	ldrb	r2, [r2, r3]
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	492e      	ldr	r1, [pc, #184]	; (80002a4 <button_reading+0x158>)
 80001ec:	5ccb      	ldrb	r3, [r1, r3]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d014      	beq.n	800021c <button_reading+0xd0>
			{
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4928      	ldr	r1, [pc, #160]	; (8000298 <button_reading+0x14c>)
 80001f8:	5c89      	ldrb	r1, [r1, r2]
 80001fa:	4a2a      	ldr	r2, [pc, #168]	; (80002a4 <button_reading+0x158>)
 80001fc:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED)
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4a28      	ldr	r2, [pc, #160]	; (80002a4 <button_reading+0x158>)
 8000202:	5cd3      	ldrb	r3, [r2, r3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d138      	bne.n	800027a <button_reading+0x12e>
				{
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a27      	ldr	r2, [pc, #156]	; (80002a8 <button_reading+0x15c>)
 800020c:	2100      	movs	r1, #0
 800020e:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a26      	ldr	r2, [pc, #152]	; (80002ac <button_reading+0x160>)
 8000214:	2164      	movs	r1, #100	; 0x64
 8000216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800021a:	e02e      	b.n	800027a <button_reading+0x12e>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4a23      	ldr	r2, [pc, #140]	; (80002ac <button_reading+0x160>)
 8000220:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000224:	3a01      	subs	r2, #1
 8000226:	b291      	uxth	r1, r2
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <button_reading+0x160>)
 800022a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <button_reading+0x160>)
 8000232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d11f      	bne.n	800027a <button_reading+0x12e>
				{
					if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED)
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <button_reading+0x158>)
 800023e:	5cd3      	ldrb	r3, [r2, r3]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d10c      	bne.n	800025e <button_reading+0x112>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <button_reading+0x160>)
 8000248:	2164      	movs	r1, #100	; 0x64
 800024a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						buttonBuffer[i] = BUTTON_IS_RELEASED;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <button_reading+0x15c>)
 8000252:	2101      	movs	r1, #1
 8000254:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i] = 1;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <button_reading+0x164>)
 800025a:	2101      	movs	r1, #1
 800025c:	54d1      	strb	r1, [r2, r3]
					}

					if(debounceButtonBuffer3[i] == BUTTON_IS_RELEASED)
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <button_reading+0x158>)
 8000262:	5cd3      	ldrb	r3, [r2, r3]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d108      	bne.n	800027a <button_reading+0x12e>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <button_reading+0x160>)
 800026c:	2164      	movs	r1, #100	; 0x64
 800026e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonPress1s[i] = 0;
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <button_reading+0x164>)
 8000276:	2100      	movs	r1, #0
 8000278:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i++)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	3301      	adds	r3, #1
 800027e:	71fb      	strb	r3, [r7, #7]
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b03      	cmp	r3, #3
 8000284:	f67f af68 	bls.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bd90      	pop	{r4, r7, pc}
 8000292:	bf00      	nop
 8000294:	20000004 	.word	0x20000004
 8000298:	20000008 	.word	0x20000008
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	200000c0 	.word	0x200000c0

080002b4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d901      	bls.n	80002c8 <is_button_pressed+0x14>
 80002c4:	2300      	movs	r3, #0
 80002c6:	e00d      	b.n	80002e4 <is_button_pressed+0x30>
	GPIO_PinState new = buttonBuffer[index];
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <is_button_pressed+0x3c>)
 80002cc:	5cd3      	ldrb	r3, [r2, r3]
 80002ce:	73fb      	strb	r3, [r7, #15]
	buttonBuffer[index] = BUTTON_IS_RELEASED;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <is_button_pressed+0x3c>)
 80002d4:	2101      	movs	r1, #1
 80002d6:	54d1      	strb	r1, [r2, r3]
	return (new == BUTTON_IS_PRESSED);
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bf0c      	ite	eq
 80002de:	2301      	moveq	r3, #1
 80002e0:	2300      	movne	r3, #0
 80002e2:	b2db      	uxtb	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000000 	.word	0x20000000

080002f4 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0xff;
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d901      	bls.n	8000308 <is_button_pressed_1s+0x14>
 8000304:	23ff      	movs	r3, #255	; 0xff
 8000306:	e00d      	b.n	8000324 <is_button_pressed_1s+0x30>
	uint8_t new = flagForButtonPress1s[index];
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <is_button_pressed_1s+0x3c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	73fb      	strb	r3, [r7, #15]
	flagForButtonPress1s[index] = 0;
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <is_button_pressed_1s+0x3c>)
 8000314:	2100      	movs	r1, #0
 8000316:	54d1      	strb	r1, [r2, r3]
	return (new == 1);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	2b01      	cmp	r3, #1
 800031c:	bf0c      	ite	eq
 800031e:	2301      	moveq	r3, #1
 8000320:	2300      	movne	r3, #0
 8000322:	b2db      	uxtb	r3, r3
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	200000c0 	.word	0x200000c0

08000334 <fsm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void fsm()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	auto_mode();
 8000338:	f000 fb00 	bl	800093c <auto_mode>
	manual_mode();
 800033c:	f000 fcee 	bl	8000d1c <manual_mode>
	Pedestrian_behavior();
 8000340:	f000 fa04 	bl	800074c <Pedestrian_behavior>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f001 fbee 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f824 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000354:	f000 f864 	bl	8000420 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000358:	f000 f94e 	bl	80005f8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800035c:	f000 f8ac 	bl	80004b8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000360:	f000 f920 	bl	80005a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <main+0x44>)
 8000366:	f002 fc31 	bl	8002bcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800036a:	2100      	movs	r1, #0
 800036c:	4808      	ldr	r0, [pc, #32]	; (8000390 <main+0x48>)
 800036e:	f002 fcd7 	bl	8002d20 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm, 20, 50);
 8000372:	2232      	movs	r2, #50	; 0x32
 8000374:	2114      	movs	r1, #20
 8000376:	4807      	ldr	r0, [pc, #28]	; (8000394 <main+0x4c>)
 8000378:	f001 f828 	bl	80013cc <SCH_Add_Task>
  SCH_Add_Task(button_reading, 20, 50);
 800037c:	2232      	movs	r2, #50	; 0x32
 800037e:	2114      	movs	r1, #20
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <main+0x50>)
 8000382:	f001 f823 	bl	80013cc <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000386:	f001 f8f1 	bl	800156c <SCH_Dispatch_Tasks>
 800038a:	e7fc      	b.n	8000386 <main+0x3e>
 800038c:	20000144 	.word	0x20000144
 8000390:	200000fc 	.word	0x200000fc
 8000394:	08000335 	.word	0x08000335
 8000398:	0800014d 	.word	0x0800014d

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 f982 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ca:	2302      	movs	r3, #2
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ce:	2300      	movs	r3, #0
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 ff97 	bl	8002310 <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003e8:	f000 f97e 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	230f      	movs	r3, #15
 80003ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2302      	movs	r3, #2
 80003f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fa02 	bl	8002810 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000412:	f000 f969 	bl	80006e8 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	; 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM2_Init+0x94>)
 800043e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000446:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800044a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_TIM2_Init+0x94>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000454:	2263      	movs	r2, #99	; 0x63
 8000456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_TIM2_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000466:	f002 fb61 	bl	8002b2c <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000470:	f000 f93a 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000482:	f002 feb9 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800048c:	f000 f92c 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM2_Init+0x94>)
 800049e:	f003 fa3b 	bl	8003918 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f000 f91e 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000144 	.word	0x20000144

080004b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	; 0x38
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	f107 0320 	add.w	r3, r7, #32
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <MX_TIM3_Init+0xe4>)
 80004ea:	4a2d      	ldr	r2, [pc, #180]	; (80005a0 <MX_TIM3_Init+0xe8>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_TIM3_Init+0xe4>)
 80004f0:	224f      	movs	r2, #79	; 0x4f
 80004f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_TIM3_Init+0xe4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_TIM3_Init+0xe4>)
 80004fc:	224f      	movs	r2, #79	; 0x4f
 80004fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_TIM3_Init+0xe4>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_TIM3_Init+0xe4>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <MX_TIM3_Init+0xe4>)
 800050e:	f002 fb0d 	bl	8002b2c <HAL_TIM_Base_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000518:	f000 f8e6 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	4619      	mov	r1, r3
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <MX_TIM3_Init+0xe4>)
 800052a:	f002 fe65 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000534:	f000 f8d8 	bl	80006e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <MX_TIM3_Init+0xe4>)
 800053a:	f002 fb99 	bl	8002c70 <HAL_TIM_PWM_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000544:	f000 f8d0 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	4619      	mov	r1, r3
 8000556:	4811      	ldr	r0, [pc, #68]	; (800059c <MX_TIM3_Init+0xe4>)
 8000558:	f003 f9de 	bl	8003918 <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000562:	f000 f8c1 	bl	80006e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000566:	2360      	movs	r3, #96	; 0x60
 8000568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <MX_TIM3_Init+0xe4>)
 800057e:	f002 fd79 	bl	8003074 <HAL_TIM_PWM_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000588:	f000 f8ae 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_TIM3_Init+0xe4>)
 800058e:	f001 f9ab 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 8000592:	bf00      	nop
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000fc 	.word	0x200000fc
 80005a0:	40000400 	.word	0x40000400

080005a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <MX_USART2_UART_Init+0x50>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_USART2_UART_Init+0x4c>)
 80005dc:	f003 fa0c 	bl	80039f8 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005e6:	f000 f87f 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000018c 	.word	0x2000018c
 80005f4:	40004400 	.word	0x40004400

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <MX_GPIO_Init+0xd4>)
 8000644:	f001 fe2f 	bl	80022a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin|LED_00_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800064e:	4820      	ldr	r0, [pc, #128]	; (80006d0 <MX_GPIO_Init+0xd8>)
 8000650:	f001 fe29 	bl	80022a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_PEDES_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN_PEDES_Pin|BTN1_Pin|BTN2_Pin;
 8000654:	2313      	movs	r3, #19
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4619      	mov	r1, r3
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <MX_GPIO_Init+0xd8>)
 8000668:	f001 fc82 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 800066c:	2301      	movs	r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0xd4>)
 8000680:	f001 fc76 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_0_Pin LED_01_Pin LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin;
 8000684:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000688:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_GPIO_Init+0xd4>)
 800069e:	f001 fc67 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_1_Pin LED_00_Pin */
  GPIO_InitStruct.Pin = LED_PED_1_Pin|LED_00_Pin;
 80006a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_GPIO_Init+0xd8>)
 80006bc:	f001 fc58 	bl	8001f70 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010c00 	.word	0x40010c00
 80006d0:	40010800 	.word	0x40010800

080006d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80006dc:	f000 ff1a 	bl	8001514 <SCH_Update>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <check_press>:
#include <mode_Pedestrian.h>

char str[100];

void check_press()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	if(is_button_pressed(3) && status < 20)
 80006f8:	2003      	movs	r0, #3
 80006fa:	f7ff fddb 	bl	80002b4 <is_button_pressed>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d016      	beq.n	8000732 <check_press+0x3e>
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <check_press+0x44>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b13      	cmp	r3, #19
 800070a:	dc12      	bgt.n	8000732 <check_press+0x3e>
	{
		setTimer4(20000);
 800070c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000710:	f000 fffc 	bl	800170c <setTimer4>
		Pedes_press = 1;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <check_press+0x48>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "PEDESTRIAN -- Time: 20\r\n"), 1000);
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <check_press+0x4c>)
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <check_press+0x50>)
 800071e:	f004 f887 	bl	8004830 <siprintf>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	4906      	ldr	r1, [pc, #24]	; (8000744 <check_press+0x50>)
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <check_press+0x54>)
 800072e:	f003 f9b3 	bl	8003a98 <HAL_UART_Transmit>
	}
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000b8 	.word	0x200000b8
 800073c:	200000bc 	.word	0x200000bc
 8000740:	08004f50 	.word	0x08004f50
 8000744:	200001d4 	.word	0x200001d4
 8000748:	2000018c 	.word	0x2000018c

0800074c <Pedestrian_behavior>:
void Pedestrian_behavior()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	check_press();
 8000750:	f7ff ffd0 	bl	80006f4 <check_press>
	if (Pedes_press == 1)
 8000754:	4b36      	ldr	r3, [pc, #216]	; (8000830 <Pedestrian_behavior+0xe4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d167      	bne.n	800082c <Pedestrian_behavior+0xe0>
	{
		switch (status)
 800075c:	4b35      	ldr	r3, [pc, #212]	; (8000834 <Pedestrian_behavior+0xe8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b0b      	subs	r3, #11
 8000762:	2b03      	cmp	r3, #3
 8000764:	d84c      	bhi.n	8000800 <Pedestrian_behavior+0xb4>
 8000766:	a201      	add	r2, pc, #4	; (adr r2, 800076c <Pedestrian_behavior+0x20>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800077d 	.word	0x0800077d
 8000770:	0800079b 	.word	0x0800079b
 8000774:	080007bf 	.word	0x080007bf
 8000778:	080007dd 	.word	0x080007dd
		{
			case RED_GREEN:
				resetBuzzer();
 800077c:	f000 f866 	bl	800084c <resetBuzzer>
				HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000786:	482c      	ldr	r0, [pc, #176]	; (8000838 <Pedestrian_behavior+0xec>)
 8000788:	f001 fd8d 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	482a      	ldr	r0, [pc, #168]	; (800083c <Pedestrian_behavior+0xf0>)
 8000794:	f001 fd87 	bl	80022a6 <HAL_GPIO_WritePin>
				break;
 8000798:	e033      	b.n	8000802 <Pedestrian_behavior+0xb6>

			case RED_YELLOW:
				setBuzzer(counter_led1);
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <Pedestrian_behavior+0xf4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f860 	bl	8000864 <setBuzzer>
				HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <Pedestrian_behavior+0xec>)
 80007ac:	f001 fd7b 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4821      	ldr	r0, [pc, #132]	; (800083c <Pedestrian_behavior+0xf0>)
 80007b8:	f001 fd75 	bl	80022a6 <HAL_GPIO_WritePin>
				break;
 80007bc:	e021      	b.n	8000802 <Pedestrian_behavior+0xb6>

			case GREEN_RED:
				resetBuzzer();
 80007be:	f000 f845 	bl	800084c <resetBuzzer>
				HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <Pedestrian_behavior+0xec>)
 80007ca:	f001 fd6c 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <Pedestrian_behavior+0xf0>)
 80007d6:	f001 fd66 	bl	80022a6 <HAL_GPIO_WritePin>
				break;
 80007da:	e012      	b.n	8000802 <Pedestrian_behavior+0xb6>

			case YELLOW_RED:
				setBuzzer(counter_led2);
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <Pedestrian_behavior+0xf8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f83f 	bl	8000864 <setBuzzer>
				HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <Pedestrian_behavior+0xec>)
 80007ee:	f001 fd5a 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <Pedestrian_behavior+0xf0>)
 80007fa:	f001 fd54 	bl	80022a6 <HAL_GPIO_WritePin>
				break;
 80007fe:	e000      	b.n	8000802 <Pedestrian_behavior+0xb6>

			default:
				break;
 8000800:	bf00      	nop
		}

		if(timer4_flag == 1)
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <Pedestrian_behavior+0xfc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d110      	bne.n	800082c <Pedestrian_behavior+0xe0>
		{
			HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <Pedestrian_behavior+0xec>)
 8000812:	f001 fd48 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <Pedestrian_behavior+0xf0>)
 800081e:	f001 fd42 	bl	80022a6 <HAL_GPIO_WritePin>
			Pedes_press = 0;
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <Pedestrian_behavior+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
			resetBuzzer();
 8000828:	f000 f810 	bl	800084c <resetBuzzer>
		}
	}
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000bc 	.word	0x200000bc
 8000834:	200000b8 	.word	0x200000b8
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40010800 	.word	0x40010800
 8000840:	200000ac 	.word	0x200000ac
 8000844:	200000b0 	.word	0x200000b0
 8000848:	200000ec 	.word	0x200000ec

0800084c <resetBuzzer>:
#include <mode_Pedestrian_Buzzer.h>

int buzzer_flag = 1;

void resetBuzzer()
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <resetBuzzer+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2200      	movs	r2, #0
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	200000fc 	.word	0x200000fc

08000864 <setBuzzer>:

void setBuzzer(int number)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	int value = 5 - number;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f1c3 0305 	rsb	r3, r3, #5
 8000872:	60fb      	str	r3, [r7, #12]

	if (buzzer_flag == 1)
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <setBuzzer+0x40>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <setBuzzer+0x22>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, value);
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <setBuzzer+0x44>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
 8000884:	e003      	b.n	800088e <setBuzzer+0x2a>
	}
	else
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <setBuzzer+0x44>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	buzzer_flag = 1 - buzzer_flag;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <setBuzzer+0x40>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f1c3 0301 	rsb	r3, r3, #1
 8000896:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <setBuzzer+0x40>)
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000018 	.word	0x20000018
 80008a8:	200000fc 	.word	0x200000fc

080008ac <SwitchMode2>:
#include "global.h"

char str[50];

void SwitchMode2()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <SwitchMode2+0x78>)
 80008b8:	f001 fcf5 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2108      	movs	r1, #8
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <SwitchMode2+0x7c>)
 80008c2:	f001 fcf0 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	4817      	ldr	r0, [pc, #92]	; (8000928 <SwitchMode2+0x7c>)
 80008cc:	f001 fceb 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <SwitchMode2+0x7c>)
 80008d6:	f001 fce6 	bl	80022a6 <HAL_GPIO_WritePin>

	// Turn off the Pedestrian led and Buzzer
	Pedes_press = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <SwitchMode2+0x80>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
	resetBuzzer();
 80008e0:	f7ff ffb4 	bl	800084c <resetBuzzer>
	HAL_GPIO_WritePin(LED_PED_0_GPIO_Port, LED_PED_0_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <SwitchMode2+0x7c>)
 80008ec:	f001 fcdb 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PED_1_GPIO_Port, LED_PED_1_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <SwitchMode2+0x78>)
 80008f8:	f001 fcd5 	bl	80022a6 <HAL_GPIO_WritePin>

	status = MODE2;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <SwitchMode2+0x84>)
 80008fe:	2214      	movs	r2, #20
 8000900:	601a      	str	r2, [r3, #0]

	counter_led1 = 20;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <SwitchMode2+0x88>)
 8000904:	2214      	movs	r2, #20
 8000906:	601a      	str	r2, [r3, #0]
	counter_led2 = 20;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <SwitchMode2+0x8c>)
 800090a:	2214      	movs	r2, #20
 800090c:	601a      	str	r2, [r3, #0]

	setTimer1(1000);
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f000 fec7 	bl	80016a4 <setTimer1>
	setTimer2(20000);
 8000916:	f644 6020 	movw	r0, #20000	; 0x4e20
 800091a:	f000 fedd 	bl	80016d8 <setTimer2>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	40010c00 	.word	0x40010c00
 800092c:	200000bc 	.word	0x200000bc
 8000930:	200000b8 	.word	0x200000b8
 8000934:	200000ac 	.word	0x200000ac
 8000938:	200000b0 	.word	0x200000b0

0800093c <auto_mode>:

void auto_mode()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch (status)
 8000940:	4bb0      	ldr	r3, [pc, #704]	; (8000c04 <auto_mode+0x2c8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b0e      	cmp	r3, #14
 8000946:	f200 81d0 	bhi.w	8000cea <auto_mode+0x3ae>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <auto_mode+0x14>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	0800098d 	.word	0x0800098d
 8000954:	08000ceb 	.word	0x08000ceb
 8000958:	08000ceb 	.word	0x08000ceb
 800095c:	08000ceb 	.word	0x08000ceb
 8000960:	08000ceb 	.word	0x08000ceb
 8000964:	08000ceb 	.word	0x08000ceb
 8000968:	08000ceb 	.word	0x08000ceb
 800096c:	08000ceb 	.word	0x08000ceb
 8000970:	08000ceb 	.word	0x08000ceb
 8000974:	08000ceb 	.word	0x08000ceb
 8000978:	08000ceb 	.word	0x08000ceb
 800097c:	080009b1 	.word	0x080009b1
 8000980:	08000a75 	.word	0x08000a75
 8000984:	08000b3f 	.word	0x08000b3f
 8000988:	08000c3d 	.word	0x08000c3d
	{
		case INIT:
			status = RED_GREEN;
 800098c:	4b9d      	ldr	r3, [pc, #628]	; (8000c04 <auto_mode+0x2c8>)
 800098e:	220b      	movs	r2, #11
 8000990:	601a      	str	r2, [r3, #0]

			counter_led1 = 50;
 8000992:	4b9d      	ldr	r3, [pc, #628]	; (8000c08 <auto_mode+0x2cc>)
 8000994:	2232      	movs	r2, #50	; 0x32
 8000996:	601a      	str	r2, [r3, #0]
			counter_led2 = 46;
 8000998:	4b9c      	ldr	r3, [pc, #624]	; (8000c0c <auto_mode+0x2d0>)
 800099a:	222e      	movs	r2, #46	; 0x2e
 800099c:	601a      	str	r2, [r3, #0]

			setTimer1(1000);		//timer 1 to countdown the number display on LED
 800099e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a2:	f000 fe7f 	bl	80016a4 <setTimer1>
			setTimer2(47000);		//timer 2 to perform 2 traffic light
 80009a6:	f24b 7098 	movw	r0, #47000	; 0xb798
 80009aa:	f000 fe95 	bl	80016d8 <setTimer2>

			break;
 80009ae:	e19d      	b.n	8000cec <auto_mode+0x3b0>

		case RED_GREEN:
			//Write pin for first traffic light:	RED
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	4896      	ldr	r0, [pc, #600]	; (8000c10 <auto_mode+0x2d4>)
 80009b8:	f001 fc75 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	4894      	ldr	r0, [pc, #592]	; (8000c14 <auto_mode+0x2d8>)
 80009c2:	f001 fc70 	bl	80022a6 <HAL_GPIO_WritePin>

			//Write pin for second traffic light:	GREEN
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	4892      	ldr	r0, [pc, #584]	; (8000c14 <auto_mode+0x2d8>)
 80009cc:	f001 fc6b 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	488f      	ldr	r0, [pc, #572]	; (8000c14 <auto_mode+0x2d8>)
 80009d6:	f001 fc66 	bl	80022a6 <HAL_GPIO_WritePin>

			if (timer1_flag == 1)
 80009da:	4b8f      	ldr	r3, [pc, #572]	; (8000c18 <auto_mode+0x2dc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d12b      	bne.n	8000a3a <auto_mode+0xfe>
			{
				setTimer1(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f000 fe5d 	bl	80016a4 <setTimer1>

				counter_led1--;
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <auto_mode+0x2cc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	4a85      	ldr	r2, [pc, #532]	; (8000c08 <auto_mode+0x2cc>)
 80009f2:	6013      	str	r3, [r2, #0]
				counter_led2--;
 80009f4:	4b85      	ldr	r3, [pc, #532]	; (8000c0c <auto_mode+0x2d0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	4a84      	ldr	r2, [pc, #528]	; (8000c0c <auto_mode+0x2d0>)
 80009fc:	6013      	str	r3, [r2, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 1: RED\r\nTime:%d\r\n", counter_led1), 1000);
 80009fe:	4b82      	ldr	r3, [pc, #520]	; (8000c08 <auto_mode+0x2cc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4985      	ldr	r1, [pc, #532]	; (8000c1c <auto_mode+0x2e0>)
 8000a06:	4886      	ldr	r0, [pc, #536]	; (8000c20 <auto_mode+0x2e4>)
 8000a08:	f003 ff12 	bl	8004830 <siprintf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	4982      	ldr	r1, [pc, #520]	; (8000c20 <auto_mode+0x2e4>)
 8000a16:	4883      	ldr	r0, [pc, #524]	; (8000c24 <auto_mode+0x2e8>)
 8000a18:	f003 f83e 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 2: GREEN\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000a1c:	4b7b      	ldr	r3, [pc, #492]	; (8000c0c <auto_mode+0x2d0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4981      	ldr	r1, [pc, #516]	; (8000c28 <auto_mode+0x2ec>)
 8000a24:	487e      	ldr	r0, [pc, #504]	; (8000c20 <auto_mode+0x2e4>)
 8000a26:	f003 ff03 	bl	8004830 <siprintf>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	497b      	ldr	r1, [pc, #492]	; (8000c20 <auto_mode+0x2e4>)
 8000a34:	487b      	ldr	r0, [pc, #492]	; (8000c24 <auto_mode+0x2e8>)
 8000a36:	f003 f82f 	bl	8003a98 <HAL_UART_Transmit>
			}

			if (timer2_flag == 1)
 8000a3a:	4b7c      	ldr	r3, [pc, #496]	; (8000c2c <auto_mode+0x2f0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d10d      	bne.n	8000a5e <auto_mode+0x122>
			{
				status = RED_YELLOW;
 8000a42:	4b70      	ldr	r3, [pc, #448]	; (8000c04 <auto_mode+0x2c8>)
 8000a44:	220c      	movs	r2, #12
 8000a46:	601a      	str	r2, [r3, #0]

				counter_led2 = 3;
 8000a48:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <auto_mode+0x2d0>)
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	601a      	str	r2, [r3, #0]

				setTimer1(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f000 fe27 	bl	80016a4 <setTimer1>
				setTimer2(4000);
 8000a56:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a5a:	f000 fe3d 	bl	80016d8 <setTimer2>
			}

			if(is_button_pressed(0)) SwitchMode2();
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fc28 	bl	80002b4 <is_button_pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <auto_mode+0x132>
 8000a6a:	f7ff ff1f 	bl	80008ac <SwitchMode2>

			//check whether user increases time or not.
			check_button_add_time();
 8000a6e:	f000 fa71 	bl	8000f54 <check_button_add_time>

			break;
 8000a72:	e13b      	b.n	8000cec <auto_mode+0x3b0>

		case RED_YELLOW:
			//Write pin for first traffic light:	RED
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4865      	ldr	r0, [pc, #404]	; (8000c10 <auto_mode+0x2d4>)
 8000a7c:	f001 fc13 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4863      	ldr	r0, [pc, #396]	; (8000c14 <auto_mode+0x2d8>)
 8000a86:	f001 fc0e 	bl	80022a6 <HAL_GPIO_WritePin>

			//Write pin for second traffic light:	YELLOW
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4861      	ldr	r0, [pc, #388]	; (8000c14 <auto_mode+0x2d8>)
 8000a90:	f001 fc09 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	485e      	ldr	r0, [pc, #376]	; (8000c14 <auto_mode+0x2d8>)
 8000a9a:	f001 fc04 	bl	80022a6 <HAL_GPIO_WritePin>

			if (timer1_flag == 1)
 8000a9e:	4b5e      	ldr	r3, [pc, #376]	; (8000c18 <auto_mode+0x2dc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d12b      	bne.n	8000afe <auto_mode+0x1c2>
			{
				setTimer1(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aaa:	f000 fdfb 	bl	80016a4 <setTimer1>

				counter_led1--;
 8000aae:	4b56      	ldr	r3, [pc, #344]	; (8000c08 <auto_mode+0x2cc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	4a54      	ldr	r2, [pc, #336]	; (8000c08 <auto_mode+0x2cc>)
 8000ab6:	6013      	str	r3, [r2, #0]
				counter_led2--;
 8000ab8:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <auto_mode+0x2d0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a53      	ldr	r2, [pc, #332]	; (8000c0c <auto_mode+0x2d0>)
 8000ac0:	6013      	str	r3, [r2, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 1: RED\r\nTime:%d\r\n", counter_led1), 1000);
 8000ac2:	4b51      	ldr	r3, [pc, #324]	; (8000c08 <auto_mode+0x2cc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4954      	ldr	r1, [pc, #336]	; (8000c1c <auto_mode+0x2e0>)
 8000aca:	4855      	ldr	r0, [pc, #340]	; (8000c20 <auto_mode+0x2e4>)
 8000acc:	f003 feb0 	bl	8004830 <siprintf>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad8:	4951      	ldr	r1, [pc, #324]	; (8000c20 <auto_mode+0x2e4>)
 8000ada:	4852      	ldr	r0, [pc, #328]	; (8000c24 <auto_mode+0x2e8>)
 8000adc:	f002 ffdc 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 2: YELLOW\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <auto_mode+0x2d0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4952      	ldr	r1, [pc, #328]	; (8000c30 <auto_mode+0x2f4>)
 8000ae8:	484d      	ldr	r0, [pc, #308]	; (8000c20 <auto_mode+0x2e4>)
 8000aea:	f003 fea1 	bl	8004830 <siprintf>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	494a      	ldr	r1, [pc, #296]	; (8000c20 <auto_mode+0x2e4>)
 8000af8:	484a      	ldr	r0, [pc, #296]	; (8000c24 <auto_mode+0x2e8>)
 8000afa:	f002 ffcd 	bl	8003a98 <HAL_UART_Transmit>
			}

			if (timer2_flag == 1)
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <auto_mode+0x2f0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d110      	bne.n	8000b28 <auto_mode+0x1ec>
			{
				status = GREEN_RED;
 8000b06:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <auto_mode+0x2c8>)
 8000b08:	220d      	movs	r2, #13
 8000b0a:	601a      	str	r2, [r3, #0]

				counter_led1 = 46;
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <auto_mode+0x2cc>)
 8000b0e:	222e      	movs	r2, #46	; 0x2e
 8000b10:	601a      	str	r2, [r3, #0]
				counter_led2 = 50;
 8000b12:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <auto_mode+0x2d0>)
 8000b14:	2232      	movs	r2, #50	; 0x32
 8000b16:	601a      	str	r2, [r3, #0]

				setTimer1(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f000 fdc2 	bl	80016a4 <setTimer1>
				setTimer2(47000);
 8000b20:	f24b 7098 	movw	r0, #47000	; 0xb798
 8000b24:	f000 fdd8 	bl	80016d8 <setTimer2>
			}

			if(is_button_pressed(0)) SwitchMode2();
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fbc3 	bl	80002b4 <is_button_pressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <auto_mode+0x1fc>
 8000b34:	f7ff feba 	bl	80008ac <SwitchMode2>

			//check whether user increases time or not.
			check_button_add_time();
 8000b38:	f000 fa0c 	bl	8000f54 <check_button_add_time>

			break;
 8000b3c:	e0d6      	b.n	8000cec <auto_mode+0x3b0>

		case GREEN_RED:
			//Write pin for first traffic light:	GREEN
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	4832      	ldr	r0, [pc, #200]	; (8000c10 <auto_mode+0x2d4>)
 8000b46:	f001 fbae 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4831      	ldr	r0, [pc, #196]	; (8000c14 <auto_mode+0x2d8>)
 8000b50:	f001 fba9 	bl	80022a6 <HAL_GPIO_WritePin>

			//Write pin for second traffic light:	RED
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2120      	movs	r1, #32
 8000b58:	482e      	ldr	r0, [pc, #184]	; (8000c14 <auto_mode+0x2d8>)
 8000b5a:	f001 fba4 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2110      	movs	r1, #16
 8000b62:	482c      	ldr	r0, [pc, #176]	; (8000c14 <auto_mode+0x2d8>)
 8000b64:	f001 fb9f 	bl	80022a6 <HAL_GPIO_WritePin>

			if (timer1_flag == 1)
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <auto_mode+0x2dc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d12b      	bne.n	8000bc8 <auto_mode+0x28c>
			{
				setTimer1(1000);
 8000b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b74:	f000 fd96 	bl	80016a4 <setTimer1>

				counter_led1--;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <auto_mode+0x2cc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <auto_mode+0x2cc>)
 8000b80:	6013      	str	r3, [r2, #0]
				counter_led2--;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <auto_mode+0x2d0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <auto_mode+0x2d0>)
 8000b8a:	6013      	str	r3, [r2, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 1: GREEN\r\nTime:%d\r\n", counter_led1), 1000);
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <auto_mode+0x2cc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4928      	ldr	r1, [pc, #160]	; (8000c34 <auto_mode+0x2f8>)
 8000b94:	4822      	ldr	r0, [pc, #136]	; (8000c20 <auto_mode+0x2e4>)
 8000b96:	f003 fe4b 	bl	8004830 <siprintf>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	491f      	ldr	r1, [pc, #124]	; (8000c20 <auto_mode+0x2e4>)
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <auto_mode+0x2e8>)
 8000ba6:	f002 ff77 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 2: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <auto_mode+0x2d0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4921      	ldr	r1, [pc, #132]	; (8000c38 <auto_mode+0x2fc>)
 8000bb2:	481b      	ldr	r0, [pc, #108]	; (8000c20 <auto_mode+0x2e4>)
 8000bb4:	f003 fe3c 	bl	8004830 <siprintf>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	4917      	ldr	r1, [pc, #92]	; (8000c20 <auto_mode+0x2e4>)
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <auto_mode+0x2e8>)
 8000bc4:	f002 ff68 	bl	8003a98 <HAL_UART_Transmit>
			}

			if (timer2_flag == 1)
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <auto_mode+0x2f0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10d      	bne.n	8000bec <auto_mode+0x2b0>
			{
				status = YELLOW_RED;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <auto_mode+0x2c8>)
 8000bd2:	220e      	movs	r2, #14
 8000bd4:	601a      	str	r2, [r3, #0]

				counter_led1 = 3;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <auto_mode+0x2cc>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	601a      	str	r2, [r3, #0]

				setTimer1(1000);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f000 fd60 	bl	80016a4 <setTimer1>
				setTimer2(4000);
 8000be4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000be8:	f000 fd76 	bl	80016d8 <setTimer2>
			}

			if(is_button_pressed(0)) SwitchMode2();
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fb61 	bl	80002b4 <is_button_pressed>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <auto_mode+0x2c0>
 8000bf8:	f7ff fe58 	bl	80008ac <SwitchMode2>

			//check whether user increases time or not.
			check_button_add_time();
 8000bfc:	f000 f9aa 	bl	8000f54 <check_button_add_time>

			break;
 8000c00:	e074      	b.n	8000cec <auto_mode+0x3b0>
 8000c02:	bf00      	nop
 8000c04:	200000b8 	.word	0x200000b8
 8000c08:	200000ac 	.word	0x200000ac
 8000c0c:	200000b0 	.word	0x200000b0
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	08004f6c 	.word	0x08004f6c
 8000c20:	200001d4 	.word	0x200001d4
 8000c24:	2000018c 	.word	0x2000018c
 8000c28:	08004f84 	.word	0x08004f84
 8000c2c:	200000dc 	.word	0x200000dc
 8000c30:	08004fa0 	.word	0x08004fa0
 8000c34:	08004fbc 	.word	0x08004fbc
 8000c38:	08004fd8 	.word	0x08004fd8

		case YELLOW_RED:
			//Write pin for first traffic light:	YELLOW
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <auto_mode+0x3b4>)
 8000c44:	f001 fb2f 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <auto_mode+0x3b8>)
 8000c4e:	f001 fb2a 	bl	80022a6 <HAL_GPIO_WritePin>

			//Write pin for second traffic light:	RED
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <auto_mode+0x3b8>)
 8000c58:	f001 fb25 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <auto_mode+0x3b8>)
 8000c62:	f001 fb20 	bl	80022a6 <HAL_GPIO_WritePin>

			if (timer1_flag == 1)
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <auto_mode+0x3bc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d12b      	bne.n	8000cc6 <auto_mode+0x38a>
			{
				setTimer1(1000);
 8000c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c72:	f000 fd17 	bl	80016a4 <setTimer1>

				counter_led1--;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <auto_mode+0x3c0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <auto_mode+0x3c0>)
 8000c7e:	6013      	str	r3, [r2, #0]
				counter_led2--;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <auto_mode+0x3c4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <auto_mode+0x3c4>)
 8000c88:	6013      	str	r3, [r2, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 1: YELLOW\r\nTime:%d\r\n", counter_led1), 1000);
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <auto_mode+0x3c0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	491c      	ldr	r1, [pc, #112]	; (8000d04 <auto_mode+0x3c8>)
 8000c92:	481d      	ldr	r0, [pc, #116]	; (8000d08 <auto_mode+0x3cc>)
 8000c94:	f003 fdcc 	bl	8004830 <siprintf>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca0:	4919      	ldr	r1, [pc, #100]	; (8000d08 <auto_mode+0x3cc>)
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <auto_mode+0x3d0>)
 8000ca4:	f002 fef8 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Road 2: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <auto_mode+0x3c4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4918      	ldr	r1, [pc, #96]	; (8000d10 <auto_mode+0x3d4>)
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <auto_mode+0x3cc>)
 8000cb2:	f003 fdbd 	bl	8004830 <siprintf>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	4912      	ldr	r1, [pc, #72]	; (8000d08 <auto_mode+0x3cc>)
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <auto_mode+0x3d0>)
 8000cc2:	f002 fee9 	bl	8003a98 <HAL_UART_Transmit>
			}

			if (timer2_flag == 1)
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <auto_mode+0x3d8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d102      	bne.n	8000cd4 <auto_mode+0x398>
			{
				status = INIT;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <auto_mode+0x3dc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
			}

			if(is_button_pressed(0)) SwitchMode2();
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff faed 	bl	80002b4 <is_button_pressed>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <auto_mode+0x3a8>
 8000ce0:	f7ff fde4 	bl	80008ac <SwitchMode2>

			//check whether user increases time or not.
			check_button_add_time();
 8000ce4:	f000 f936 	bl	8000f54 <check_button_add_time>

			break;
 8000ce8:	e000      	b.n	8000cec <auto_mode+0x3b0>

		default:
			break;
 8000cea:	bf00      	nop
	}
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	200000d4 	.word	0x200000d4
 8000cfc:	200000ac 	.word	0x200000ac
 8000d00:	200000b0 	.word	0x200000b0
 8000d04:	08004ff4 	.word	0x08004ff4
 8000d08:	200001d4 	.word	0x200001d4
 8000d0c:	2000018c 	.word	0x2000018c
 8000d10:	08004fd8 	.word	0x08004fd8
 8000d14:	200000dc 	.word	0x200000dc
 8000d18:	200000b8 	.word	0x200000b8

08000d1c <manual_mode>:
#include "global.h"

char str[50];

void manual_mode()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	switch (status)
 8000d20:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <manual_mode+0x204>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b14      	cmp	r3, #20
 8000d26:	d002      	beq.n	8000d2e <manual_mode+0x12>
 8000d28:	2b1e      	cmp	r3, #30
 8000d2a:	d07b      	beq.n	8000e24 <manual_mode+0x108>
			check_button_add_time();

			break;

		default:
			break;
 8000d2c:	e0f5      	b.n	8000f1a <manual_mode+0x1fe>
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	487b      	ldr	r0, [pc, #492]	; (8000f24 <manual_mode+0x208>)
 8000d36:	f001 fab6 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	487a      	ldr	r0, [pc, #488]	; (8000f28 <manual_mode+0x20c>)
 8000d40:	f001 fab1 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2120      	movs	r1, #32
 8000d48:	4877      	ldr	r0, [pc, #476]	; (8000f28 <manual_mode+0x20c>)
 8000d4a:	f001 faac 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2110      	movs	r1, #16
 8000d52:	4875      	ldr	r0, [pc, #468]	; (8000f28 <manual_mode+0x20c>)
 8000d54:	f001 faa7 	bl	80022a6 <HAL_GPIO_WritePin>
			if(timer1_flag == 1)
 8000d58:	4b74      	ldr	r3, [pc, #464]	; (8000f2c <manual_mode+0x210>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d12b      	bne.n	8000db8 <manual_mode+0x9c>
				counter_led1--;
 8000d60:	4b73      	ldr	r3, [pc, #460]	; (8000f30 <manual_mode+0x214>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a72      	ldr	r2, [pc, #456]	; (8000f30 <manual_mode+0x214>)
 8000d68:	6013      	str	r3, [r2, #0]
				counter_led2--;
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <manual_mode+0x218>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a70      	ldr	r2, [pc, #448]	; (8000f34 <manual_mode+0x218>)
 8000d72:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "MANUAL: RED\r\nTime:%d\r\n", counter_led1), 1000);
 8000d74:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <manual_mode+0x214>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	496f      	ldr	r1, [pc, #444]	; (8000f38 <manual_mode+0x21c>)
 8000d7c:	486f      	ldr	r0, [pc, #444]	; (8000f3c <manual_mode+0x220>)
 8000d7e:	f003 fd57 	bl	8004830 <siprintf>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	496c      	ldr	r1, [pc, #432]	; (8000f3c <manual_mode+0x220>)
 8000d8c:	486c      	ldr	r0, [pc, #432]	; (8000f40 <manual_mode+0x224>)
 8000d8e:	f002 fe83 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "MANUAL: GREEN\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000d92:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <manual_mode+0x218>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	496a      	ldr	r1, [pc, #424]	; (8000f44 <manual_mode+0x228>)
 8000d9a:	4868      	ldr	r0, [pc, #416]	; (8000f3c <manual_mode+0x220>)
 8000d9c:	f003 fd48 	bl	8004830 <siprintf>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	4964      	ldr	r1, [pc, #400]	; (8000f3c <manual_mode+0x220>)
 8000daa:	4865      	ldr	r0, [pc, #404]	; (8000f40 <manual_mode+0x224>)
 8000dac:	f002 fe74 	bl	8003a98 <HAL_UART_Transmit>
				setTimer1(1000);
 8000db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db4:	f000 fc76 	bl	80016a4 <setTimer1>
			if(timer2_flag == 1)
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <manual_mode+0x22c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d125      	bne.n	8000e0c <manual_mode+0xf0>
				HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc6:	4857      	ldr	r0, [pc, #348]	; (8000f24 <manual_mode+0x208>)
 8000dc8:	f001 fa6d 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4855      	ldr	r0, [pc, #340]	; (8000f28 <manual_mode+0x20c>)
 8000dd2:	f001 fa68 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2120      	movs	r1, #32
 8000dda:	4853      	ldr	r0, [pc, #332]	; (8000f28 <manual_mode+0x20c>)
 8000ddc:	f001 fa63 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	4850      	ldr	r0, [pc, #320]	; (8000f28 <manual_mode+0x20c>)
 8000de6:	f001 fa5e 	bl	80022a6 <HAL_GPIO_WritePin>
				status = MODE3;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <manual_mode+0x204>)
 8000dec:	221e      	movs	r2, #30
 8000dee:	601a      	str	r2, [r3, #0]
				counter_led1 = 20;
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <manual_mode+0x214>)
 8000df2:	2214      	movs	r2, #20
 8000df4:	601a      	str	r2, [r3, #0]
				counter_led2 = 20;
 8000df6:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <manual_mode+0x218>)
 8000df8:	2214      	movs	r2, #20
 8000dfa:	601a      	str	r2, [r3, #0]
				setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f000 fc50 	bl	80016a4 <setTimer1>
				setTimer2(20000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 8000e04:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e08:	f000 fc66 	bl	80016d8 <setTimer2>
			if(is_button_pressed(0))
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fa51 	bl	80002b4 <is_button_pressed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <manual_mode+0x102>
				status = INIT;
 8000e18:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <manual_mode+0x204>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
			check_button_add_time();
 8000e1e:	f000 f899 	bl	8000f54 <check_button_add_time>
			break;
 8000e22:	e07a      	b.n	8000f1a <manual_mode+0x1fe>
			HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	483e      	ldr	r0, [pc, #248]	; (8000f24 <manual_mode+0x208>)
 8000e2c:	f001 fa3b 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2108      	movs	r1, #8
 8000e34:	483c      	ldr	r0, [pc, #240]	; (8000f28 <manual_mode+0x20c>)
 8000e36:	f001 fa36 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	483a      	ldr	r0, [pc, #232]	; (8000f28 <manual_mode+0x20c>)
 8000e40:	f001 fa31 	bl	80022a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	4837      	ldr	r0, [pc, #220]	; (8000f28 <manual_mode+0x20c>)
 8000e4a:	f001 fa2c 	bl	80022a6 <HAL_GPIO_WritePin>
			if(timer1_flag == 1)
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <manual_mode+0x210>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d12b      	bne.n	8000eae <manual_mode+0x192>
				counter_led1--;
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <manual_mode+0x214>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a34      	ldr	r2, [pc, #208]	; (8000f30 <manual_mode+0x214>)
 8000e5e:	6013      	str	r3, [r2, #0]
				counter_led2--;
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <manual_mode+0x218>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <manual_mode+0x218>)
 8000e68:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "MANUAL: GREEN\r\nTime:%d\r\n", counter_led1), 1000);
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <manual_mode+0x214>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4936      	ldr	r1, [pc, #216]	; (8000f4c <manual_mode+0x230>)
 8000e72:	4832      	ldr	r0, [pc, #200]	; (8000f3c <manual_mode+0x220>)
 8000e74:	f003 fcdc 	bl	8004830 <siprintf>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	492e      	ldr	r1, [pc, #184]	; (8000f3c <manual_mode+0x220>)
 8000e82:	482f      	ldr	r0, [pc, #188]	; (8000f40 <manual_mode+0x224>)
 8000e84:	f002 fe08 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "MANUAL: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <manual_mode+0x218>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4930      	ldr	r1, [pc, #192]	; (8000f50 <manual_mode+0x234>)
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <manual_mode+0x220>)
 8000e92:	f003 fccd 	bl	8004830 <siprintf>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	4927      	ldr	r1, [pc, #156]	; (8000f3c <manual_mode+0x220>)
 8000ea0:	4827      	ldr	r0, [pc, #156]	; (8000f40 <manual_mode+0x224>)
 8000ea2:	f002 fdf9 	bl	8003a98 <HAL_UART_Transmit>
				setTimer1(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eaa:	f000 fbfb 	bl	80016a4 <setTimer1>
			if(timer2_flag == 1)
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <manual_mode+0x22c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d125      	bne.n	8000f02 <manual_mode+0x1e6>
				HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <manual_mode+0x208>)
 8000ebe:	f001 f9f2 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <manual_mode+0x20c>)
 8000ec8:	f001 f9ed 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <manual_mode+0x20c>)
 8000ed2:	f001 f9e8 	bl	80022a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4813      	ldr	r0, [pc, #76]	; (8000f28 <manual_mode+0x20c>)
 8000edc:	f001 f9e3 	bl	80022a6 <HAL_GPIO_WritePin>
				status = MODE2;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <manual_mode+0x204>)
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	601a      	str	r2, [r3, #0]
				counter_led1 = 20;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <manual_mode+0x214>)
 8000ee8:	2214      	movs	r2, #20
 8000eea:	601a      	str	r2, [r3, #0]
				counter_led2 = 20;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <manual_mode+0x218>)
 8000eee:	2214      	movs	r2, #20
 8000ef0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f000 fbd5 	bl	80016a4 <setTimer1>
				setTimer2(20000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 8000efa:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000efe:	f000 fbeb 	bl	80016d8 <setTimer2>
			if(is_button_pressed(0))
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff f9d6 	bl	80002b4 <is_button_pressed>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <manual_mode+0x1f8>
				status = INIT;
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <manual_mode+0x204>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
			check_button_add_time();
 8000f14:	f000 f81e 	bl	8000f54 <check_button_add_time>
			break;
 8000f18:	bf00      	nop

	}
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000b8 	.word	0x200000b8
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	200000d4 	.word	0x200000d4
 8000f30:	200000ac 	.word	0x200000ac
 8000f34:	200000b0 	.word	0x200000b0
 8000f38:	08005010 	.word	0x08005010
 8000f3c:	200001d4 	.word	0x200001d4
 8000f40:	2000018c 	.word	0x2000018c
 8000f44:	08005028 	.word	0x08005028
 8000f48:	200000dc 	.word	0x200000dc
 8000f4c:	08005044 	.word	0x08005044
 8000f50:	08005060 	.word	0x08005060

08000f54 <check_button_add_time>:
#include "software_timer.h"

char str[50];

void check_button_add_time()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(is_button_pressed(1) || is_button_pressed_1s(1))
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff f9ab 	bl	80002b4 <is_button_pressed>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <check_button_add_time+0x1c>
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff f9c5 	bl	80002f4 <is_button_pressed_1s>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <check_button_add_time+0x26>
	{
		tunning_led += 100;
 8000f70:	4b98      	ldr	r3, [pc, #608]	; (80011d4 <check_button_add_time+0x280>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3364      	adds	r3, #100	; 0x64
 8000f76:	4a97      	ldr	r2, [pc, #604]	; (80011d4 <check_button_add_time+0x280>)
 8000f78:	6013      	str	r3, [r2, #0]
	}

	if(is_button_pressed(2))
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff f99a 	bl	80002b4 <is_button_pressed>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 81ac 	beq.w	80012e0 <check_button_add_time+0x38c>
	{
		adding_time(tunning_led);
 8000f88:	4b92      	ldr	r3, [pc, #584]	; (80011d4 <check_button_add_time+0x280>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb73 	bl	8001678 <adding_time>
		switch (status)
 8000f92:	4b91      	ldr	r3, [pc, #580]	; (80011d8 <check_button_add_time+0x284>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b0b      	subs	r3, #11
 8000f98:	2b13      	cmp	r3, #19
 8000f9a:	f200 81a3 	bhi.w	80012e4 <check_button_add_time+0x390>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <check_button_add_time+0x50>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	0800106d 	.word	0x0800106d
 8000fac:	080010e5 	.word	0x080010e5
 8000fb0:	0800115d 	.word	0x0800115d
 8000fb4:	080012e5 	.word	0x080012e5
 8000fb8:	080012e5 	.word	0x080012e5
 8000fbc:	080012e5 	.word	0x080012e5
 8000fc0:	080012e5 	.word	0x080012e5
 8000fc4:	080012e5 	.word	0x080012e5
 8000fc8:	08001209 	.word	0x08001209
 8000fcc:	080012e5 	.word	0x080012e5
 8000fd0:	080012e5 	.word	0x080012e5
 8000fd4:	080012e5 	.word	0x080012e5
 8000fd8:	080012e5 	.word	0x080012e5
 8000fdc:	080012e5 	.word	0x080012e5
 8000fe0:	080012e5 	.word	0x080012e5
 8000fe4:	080012e5 	.word	0x080012e5
 8000fe8:	080012e5 	.word	0x080012e5
 8000fec:	080012e5 	.word	0x080012e5
 8000ff0:	08001275 	.word	0x08001275
		{
			case RED_GREEN:
				counter_led1 = counter_led1 + (tunning_led / 100);
 8000ff4:	4b77      	ldr	r3, [pc, #476]	; (80011d4 <check_button_add_time+0x280>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a78      	ldr	r2, [pc, #480]	; (80011dc <check_button_add_time+0x288>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	1152      	asrs	r2, r2, #5
 8001000:	17db      	asrs	r3, r3, #31
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <check_button_add_time+0x28c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4413      	add	r3, r2
 800100a:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <check_button_add_time+0x28c>)
 800100c:	6013      	str	r3, [r2, #0]
				counter_led2 = counter_led2 + (tunning_led / 100);
 800100e:	4b71      	ldr	r3, [pc, #452]	; (80011d4 <check_button_add_time+0x280>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a72      	ldr	r2, [pc, #456]	; (80011dc <check_button_add_time+0x288>)
 8001014:	fb82 1203 	smull	r1, r2, r2, r3
 8001018:	1152      	asrs	r2, r2, #5
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	4b71      	ldr	r3, [pc, #452]	; (80011e4 <check_button_add_time+0x290>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a6f      	ldr	r2, [pc, #444]	; (80011e4 <check_button_add_time+0x290>)
 8001026:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 8001028:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <check_button_add_time+0x280>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n", counter_led1), 1000);
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <check_button_add_time+0x28c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	496c      	ldr	r1, [pc, #432]	; (80011e8 <check_button_add_time+0x294>)
 8001036:	486d      	ldr	r0, [pc, #436]	; (80011ec <check_button_add_time+0x298>)
 8001038:	f003 fbfa 	bl	8004830 <siprintf>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	4969      	ldr	r1, [pc, #420]	; (80011ec <check_button_add_time+0x298>)
 8001046:	486a      	ldr	r0, [pc, #424]	; (80011f0 <check_button_add_time+0x29c>)
 8001048:	f002 fd26 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: GREEN\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 800104c:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <check_button_add_time+0x290>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4968      	ldr	r1, [pc, #416]	; (80011f4 <check_button_add_time+0x2a0>)
 8001054:	4865      	ldr	r0, [pc, #404]	; (80011ec <check_button_add_time+0x298>)
 8001056:	f003 fbeb 	bl	8004830 <siprintf>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	4962      	ldr	r1, [pc, #392]	; (80011ec <check_button_add_time+0x298>)
 8001064:	4862      	ldr	r0, [pc, #392]	; (80011f0 <check_button_add_time+0x29c>)
 8001066:	f002 fd17 	bl	8003a98 <HAL_UART_Transmit>
				break;
 800106a:	e13c      	b.n	80012e6 <check_button_add_time+0x392>

			case RED_YELLOW:
				counter_led1 = counter_led1 + (tunning_led / 100);
 800106c:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <check_button_add_time+0x280>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a5a      	ldr	r2, [pc, #360]	; (80011dc <check_button_add_time+0x288>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1152      	asrs	r2, r2, #5
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <check_button_add_time+0x28c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4413      	add	r3, r2
 8001082:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <check_button_add_time+0x28c>)
 8001084:	6013      	str	r3, [r2, #0]
				counter_led2 = counter_led2 + (tunning_led / 100);
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <check_button_add_time+0x280>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a54      	ldr	r2, [pc, #336]	; (80011dc <check_button_add_time+0x288>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1152      	asrs	r2, r2, #5
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <check_button_add_time+0x290>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a51      	ldr	r2, [pc, #324]	; (80011e4 <check_button_add_time+0x290>)
 800109e:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <check_button_add_time+0x280>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n", counter_led1), 1000);
 80010a6:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <check_button_add_time+0x28c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	494e      	ldr	r1, [pc, #312]	; (80011e8 <check_button_add_time+0x294>)
 80010ae:	484f      	ldr	r0, [pc, #316]	; (80011ec <check_button_add_time+0x298>)
 80010b0:	f003 fbbe 	bl	8004830 <siprintf>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	494b      	ldr	r1, [pc, #300]	; (80011ec <check_button_add_time+0x298>)
 80010be:	484c      	ldr	r0, [pc, #304]	; (80011f0 <check_button_add_time+0x29c>)
 80010c0:	f002 fcea 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: YELLOW\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 80010c4:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <check_button_add_time+0x290>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	494b      	ldr	r1, [pc, #300]	; (80011f8 <check_button_add_time+0x2a4>)
 80010cc:	4847      	ldr	r0, [pc, #284]	; (80011ec <check_button_add_time+0x298>)
 80010ce:	f003 fbaf 	bl	8004830 <siprintf>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	4944      	ldr	r1, [pc, #272]	; (80011ec <check_button_add_time+0x298>)
 80010dc:	4844      	ldr	r0, [pc, #272]	; (80011f0 <check_button_add_time+0x29c>)
 80010de:	f002 fcdb 	bl	8003a98 <HAL_UART_Transmit>
				break;
 80010e2:	e100      	b.n	80012e6 <check_button_add_time+0x392>

			case GREEN_RED:
				counter_led1 = counter_led1 + (tunning_led / 100);
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <check_button_add_time+0x280>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3c      	ldr	r2, [pc, #240]	; (80011dc <check_button_add_time+0x288>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	1152      	asrs	r2, r2, #5
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <check_button_add_time+0x28c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a39      	ldr	r2, [pc, #228]	; (80011e0 <check_button_add_time+0x28c>)
 80010fc:	6013      	str	r3, [r2, #0]
				counter_led2 = counter_led2 + (tunning_led / 100);
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <check_button_add_time+0x280>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a36      	ldr	r2, [pc, #216]	; (80011dc <check_button_add_time+0x288>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1152      	asrs	r2, r2, #5
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad2      	subs	r2, r2, r3
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <check_button_add_time+0x290>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <check_button_add_time+0x290>)
 8001116:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <check_button_add_time+0x280>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: GREEN\r\nTime:%d\r\n", counter_led1), 1000);
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <check_button_add_time+0x28c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <check_button_add_time+0x2a8>)
 8001126:	4831      	ldr	r0, [pc, #196]	; (80011ec <check_button_add_time+0x298>)
 8001128:	f003 fb82 	bl	8004830 <siprintf>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001134:	492d      	ldr	r1, [pc, #180]	; (80011ec <check_button_add_time+0x298>)
 8001136:	482e      	ldr	r0, [pc, #184]	; (80011f0 <check_button_add_time+0x29c>)
 8001138:	f002 fcae 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <check_button_add_time+0x290>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	492f      	ldr	r1, [pc, #188]	; (8001200 <check_button_add_time+0x2ac>)
 8001144:	4829      	ldr	r0, [pc, #164]	; (80011ec <check_button_add_time+0x298>)
 8001146:	f003 fb73 	bl	8004830 <siprintf>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4926      	ldr	r1, [pc, #152]	; (80011ec <check_button_add_time+0x298>)
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <check_button_add_time+0x29c>)
 8001156:	f002 fc9f 	bl	8003a98 <HAL_UART_Transmit>
				break;
 800115a:	e0c4      	b.n	80012e6 <check_button_add_time+0x392>

			case YELLOW_RED:
				counter_led1 = counter_led1 + (tunning_led / 100);
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <check_button_add_time+0x280>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <check_button_add_time+0x288>)
 8001162:	fb82 1203 	smull	r1, r2, r2, r3
 8001166:	1152      	asrs	r2, r2, #5
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <check_button_add_time+0x28c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <check_button_add_time+0x28c>)
 8001174:	6013      	str	r3, [r2, #0]
				counter_led2 = counter_led2 + (tunning_led / 100);
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <check_button_add_time+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <check_button_add_time+0x288>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	1152      	asrs	r2, r2, #5
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad2      	subs	r2, r2, r3
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <check_button_add_time+0x290>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <check_button_add_time+0x290>)
 800118e:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <check_button_add_time+0x280>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: YELLOW\r\nTime:%d\r\n", counter_led1), 1000);
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <check_button_add_time+0x28c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4919      	ldr	r1, [pc, #100]	; (8001204 <check_button_add_time+0x2b0>)
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <check_button_add_time+0x298>)
 80011a0:	f003 fb46 	bl	8004830 <siprintf>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	490f      	ldr	r1, [pc, #60]	; (80011ec <check_button_add_time+0x298>)
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <check_button_add_time+0x29c>)
 80011b0:	f002 fc72 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <check_button_add_time+0x290>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4911      	ldr	r1, [pc, #68]	; (8001200 <check_button_add_time+0x2ac>)
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <check_button_add_time+0x298>)
 80011be:	f003 fb37 	bl	8004830 <siprintf>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <check_button_add_time+0x298>)
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <check_button_add_time+0x29c>)
 80011ce:	f002 fc63 	bl	8003a98 <HAL_UART_Transmit>
				break;
 80011d2:	e088      	b.n	80012e6 <check_button_add_time+0x392>
 80011d4:	200000b4 	.word	0x200000b4
 80011d8:	200000b8 	.word	0x200000b8
 80011dc:	51eb851f 	.word	0x51eb851f
 80011e0:	200000ac 	.word	0x200000ac
 80011e4:	200000b0 	.word	0x200000b0
 80011e8:	0800507c 	.word	0x0800507c
 80011ec:	200001d4 	.word	0x200001d4
 80011f0:	2000018c 	.word	0x2000018c
 80011f4:	08005094 	.word	0x08005094
 80011f8:	080050b0 	.word	0x080050b0
 80011fc:	080050cc 	.word	0x080050cc
 8001200:	080050e8 	.word	0x080050e8
 8001204:	08005104 	.word	0x08005104

			case MODE2:
				counter_led1 = (tunning_led / 100);
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <check_button_add_time+0x398>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <check_button_add_time+0x39c>)
 800120e:	fb82 1203 	smull	r1, r2, r2, r3
 8001212:	1152      	asrs	r2, r2, #5
 8001214:	17db      	asrs	r3, r3, #31
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <check_button_add_time+0x3a0>)
 800121a:	6013      	str	r3, [r2, #0]
				counter_led2 = (tunning_led / 100);
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <check_button_add_time+0x398>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <check_button_add_time+0x39c>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <check_button_add_time+0x3a4>)
 800122e:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <check_button_add_time+0x398>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n", counter_led1), 1000);
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <check_button_add_time+0x3a0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	492f      	ldr	r1, [pc, #188]	; (80012fc <check_button_add_time+0x3a8>)
 800123e:	4830      	ldr	r0, [pc, #192]	; (8001300 <check_button_add_time+0x3ac>)
 8001240:	f003 faf6 	bl	8004830 <siprintf>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	492c      	ldr	r1, [pc, #176]	; (8001300 <check_button_add_time+0x3ac>)
 800124e:	482d      	ldr	r0, [pc, #180]	; (8001304 <check_button_add_time+0x3b0>)
 8001250:	f002 fc22 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: GREEN\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <check_button_add_time+0x3a4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	492b      	ldr	r1, [pc, #172]	; (8001308 <check_button_add_time+0x3b4>)
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <check_button_add_time+0x3ac>)
 800125e:	f003 fae7 	bl	8004830 <siprintf>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	4925      	ldr	r1, [pc, #148]	; (8001300 <check_button_add_time+0x3ac>)
 800126c:	4825      	ldr	r0, [pc, #148]	; (8001304 <check_button_add_time+0x3b0>)
 800126e:	f002 fc13 	bl	8003a98 <HAL_UART_Transmit>
				break;
 8001272:	e038      	b.n	80012e6 <check_button_add_time+0x392>

			case MODE3:
				counter_led1 = (tunning_led / 100);
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <check_button_add_time+0x398>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <check_button_add_time+0x39c>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	1152      	asrs	r2, r2, #5
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <check_button_add_time+0x3a0>)
 8001286:	6013      	str	r3, [r2, #0]
				counter_led2 = (tunning_led / 100);
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <check_button_add_time+0x398>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <check_button_add_time+0x39c>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	1152      	asrs	r2, r2, #5
 8001294:	17db      	asrs	r3, r3, #31
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <check_button_add_time+0x3a4>)
 800129a:	6013      	str	r3, [r2, #0]
				tunning_led = 0;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <check_button_add_time+0x398>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: GREEN\r\nTime:%d\r\n", counter_led1), 1000);
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <check_button_add_time+0x3a0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4918      	ldr	r1, [pc, #96]	; (800130c <check_button_add_time+0x3b8>)
 80012aa:	4815      	ldr	r0, [pc, #84]	; (8001300 <check_button_add_time+0x3ac>)
 80012ac:	f003 fac0 	bl	8004830 <siprintf>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <check_button_add_time+0x3ac>)
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <check_button_add_time+0x3b0>)
 80012bc:	f002 fbec 	bl	8003a98 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(void*)str,sprintf(str, "Tuning: RED\r\nTime:%d\r\n\r\n", counter_led2), 1000);
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <check_button_add_time+0x3a4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4912      	ldr	r1, [pc, #72]	; (8001310 <check_button_add_time+0x3bc>)
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <check_button_add_time+0x3ac>)
 80012ca:	f003 fab1 	bl	8004830 <siprintf>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <check_button_add_time+0x3ac>)
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <check_button_add_time+0x3b0>)
 80012da:	f002 fbdd 	bl	8003a98 <HAL_UART_Transmit>
				break;
 80012de:	e002      	b.n	80012e6 <check_button_add_time+0x392>

			default:
				break;
		}
	}
 80012e0:	bf00      	nop
 80012e2:	e000      	b.n	80012e6 <check_button_add_time+0x392>
				break;
 80012e4:	bf00      	nop
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000b4 	.word	0x200000b4
 80012f0:	51eb851f 	.word	0x51eb851f
 80012f4:	200000ac 	.word	0x200000ac
 80012f8:	200000b0 	.word	0x200000b0
 80012fc:	0800507c 	.word	0x0800507c
 8001300:	200001d4 	.word	0x200001d4
 8001304:	2000018c 	.word	0x2000018c
 8001308:	08005094 	.word	0x08005094
 800130c:	080050cc 	.word	0x080050cc
 8001310:	080050e8 	.word	0x080050e8

08001314 <SCH_Find_Position>:

char str[100];
uint8_t tracker[SCH_MAX_TASKS], mutex_lock;

void SCH_Find_Position(struct sTask *index)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	if(index == sTaskList)
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <SCH_Find_Position+0xb4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d04b      	beq.n	80013be <SCH_Find_Position+0xaa>
	{
		return;
	}
	struct sTask *iterator = sTaskList;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <SCH_Find_Position+0xb4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]
	//Not yet found position
	uint8_t check = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	72fb      	strb	r3, [r7, #11]
	while(iterator->delay <= index->delay)
 8001330:	e014      	b.n	800135c <SCH_Find_Position+0x48>
	{
		if(iterator == sTaskList) check += 1;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <SCH_Find_Position+0xb4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d102      	bne.n	8001342 <SCH_Find_Position+0x2e>
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	3301      	adds	r3, #1
 8001340:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d010      	beq.n	800136a <SCH_Find_Position+0x56>
		index->delay -= iterator->delay;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60da      	str	r2, [r3, #12]
		iterator = iterator->right;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60fb      	str	r3, [r7, #12]
	while(iterator->delay <= index->delay)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d9e4      	bls.n	8001332 <SCH_Find_Position+0x1e>
 8001368:	e000      	b.n	800136c <SCH_Find_Position+0x58>
		if(check == 2) break;
 800136a:	bf00      	nop
	}

	//Found position
	if(index->delay == 0) index->run_flag = 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <SCH_Find_Position+0x66>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	761a      	strb	r2, [r3, #24]
	index->right = iterator;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
	index->left = iterator->left;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	601a      	str	r2, [r3, #0]
	iterator->left->right = index;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]
	iterator->left = index;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]

	//Update the immediately after
	if(iterator != sTaskList)
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <SCH_Find_Position+0xb4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d00f      	beq.n	80013c0 <SCH_Find_Position+0xac>
	{
		iterator->delay -= index->delay;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	1ad2      	subs	r2, r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	60da      	str	r2, [r3, #12]
		if(iterator->delay == 0) iterator->run_flag = 1;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <SCH_Find_Position+0xac>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	761a      	strb	r2, [r3, #24]
 80013bc:	e000      	b.n	80013c0 <SCH_Find_Position+0xac>
		return;
 80013be:	bf00      	nop
	}
}
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200000c4 	.word	0x200000c4

080013cc <SCH_Add_Task>:

int SCH_Add_Task(void (*funcPointer)(), uint32_t delay, uint32_t period)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	if(!funcPointer)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <SCH_Add_Task+0x2e>
	{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Function pointer invalid\r\n"), 200);
 80013de:	4943      	ldr	r1, [pc, #268]	; (80014ec <SCH_Add_Task+0x120>)
 80013e0:	4843      	ldr	r0, [pc, #268]	; (80014f0 <SCH_Add_Task+0x124>)
 80013e2:	f003 fa25 	bl	8004830 <siprintf>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	23c8      	movs	r3, #200	; 0xc8
 80013ec:	4940      	ldr	r1, [pc, #256]	; (80014f0 <SCH_Add_Task+0x124>)
 80013ee:	4841      	ldr	r0, [pc, #260]	; (80014f4 <SCH_Add_Task+0x128>)
 80013f0:	f002 fb52 	bl	8003a98 <HAL_UART_Transmit>
		return -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	e074      	b.n	80014e4 <SCH_Add_Task+0x118>
	}
	uint32_t runnerID = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	while((runnerID < SCH_MAX_TASKS) && (tracker[runnerID]))
 80013fe:	e002      	b.n	8001406 <SCH_Add_Task+0x3a>
	{
		runnerID += 1;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
	while((runnerID < SCH_MAX_TASKS) && (tracker[runnerID]))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b27      	cmp	r3, #39	; 0x27
 800140a:	d805      	bhi.n	8001418 <SCH_Add_Task+0x4c>
 800140c:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <SCH_Add_Task+0x12c>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f3      	bne.n	8001400 <SCH_Add_Task+0x34>
	}
	if(runnerID == SCH_MAX_TASKS)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b28      	cmp	r3, #40	; 0x28
 800141c:	d10d      	bne.n	800143a <SCH_Add_Task+0x6e>
	{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Scheduler full\r\n"), 200);
 800141e:	4937      	ldr	r1, [pc, #220]	; (80014fc <SCH_Add_Task+0x130>)
 8001420:	4833      	ldr	r0, [pc, #204]	; (80014f0 <SCH_Add_Task+0x124>)
 8001422:	f003 fa05 	bl	8004830 <siprintf>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	23c8      	movs	r3, #200	; 0xc8
 800142c:	4930      	ldr	r1, [pc, #192]	; (80014f0 <SCH_Add_Task+0x124>)
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <SCH_Add_Task+0x128>)
 8001430:	f002 fb32 	bl	8003a98 <HAL_UART_Transmit>
		return -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	e054      	b.n	80014e4 <SCH_Add_Task+0x118>
	}
	else tracker[runnerID] = 1;
 800143a:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <SCH_Add_Task+0x12c>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
	mutex_lock = 1;
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <SCH_Add_Task+0x134>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]

	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 800144a:	201c      	movs	r0, #28
 800144c:	f003 f922 	bl	8004694 <malloc>
 8001450:	4603      	mov	r3, r0
 8001452:	613b      	str	r3, [r7, #16]
	curTask->delay = delay / DELAY;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <SCH_Add_Task+0x138>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
	curTask->period = period / DELAY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <SCH_Add_Task+0x138>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	615a      	str	r2, [r3, #20]
	curTask->run_flag = 0;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2200      	movs	r2, #0
 8001480:	761a      	strb	r2, [r3, #24]

	if(sTaskList)
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <SCH_Add_Task+0x13c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d011      	beq.n	80014ae <SCH_Add_Task+0xe2>
	{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added %lu\r\n", curTask->taskID), 200);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	461a      	mov	r2, r3
 8001490:	491e      	ldr	r1, [pc, #120]	; (800150c <SCH_Add_Task+0x140>)
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <SCH_Add_Task+0x124>)
 8001494:	f003 f9cc 	bl	8004830 <siprintf>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	23c8      	movs	r3, #200	; 0xc8
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <SCH_Add_Task+0x124>)
 80014a0:	4814      	ldr	r0, [pc, #80]	; (80014f4 <SCH_Add_Task+0x128>)
 80014a2:	f002 faf9 	bl	8003a98 <HAL_UART_Transmit>
		SCH_Find_Position(curTask);
 80014a6:	6938      	ldr	r0, [r7, #16]
 80014a8:	f7ff ff34 	bl	8001314 <SCH_Find_Position>
 80014ac:	e016      	b.n	80014dc <SCH_Add_Task+0x110>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added first %lu\r\n", curTask->taskID), 200);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <SCH_Add_Task+0x144>)
 80014b6:	480e      	ldr	r0, [pc, #56]	; (80014f0 <SCH_Add_Task+0x124>)
 80014b8:	f003 f9ba 	bl	8004830 <siprintf>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	23c8      	movs	r3, #200	; 0xc8
 80014c2:	490b      	ldr	r1, [pc, #44]	; (80014f0 <SCH_Add_Task+0x124>)
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <SCH_Add_Task+0x128>)
 80014c6:	f002 fae7 	bl	8003a98 <HAL_UART_Transmit>
		curTask->left = curTask;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
		sTaskList = curTask;
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <SCH_Add_Task+0x13c>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	6013      	str	r3, [r2, #0]
	}
	mutex_lock = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <SCH_Add_Task+0x134>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
	return runnerID;
 80014e2:	697b      	ldr	r3, [r7, #20]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	08005120 	.word	0x08005120
 80014f0:	200001d4 	.word	0x200001d4
 80014f4:	2000018c 	.word	0x2000018c
 80014f8:	2000023c 	.word	0x2000023c
 80014fc:	08005148 	.word	0x08005148
 8001500:	20000238 	.word	0x20000238
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	200000c4 	.word	0x200000c4
 800150c:	08005164 	.word	0x08005164
 8001510:	0800517c 	.word	0x0800517c

08001514 <SCH_Update>:

void SCH_Update()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	if((sTaskList) && (!sTaskList->run_flag) && (!mutex_lock))
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SCH_Update+0x50>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01d      	beq.n	800155c <SCH_Update+0x48>
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <SCH_Update+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	7e1b      	ldrb	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <SCH_Update+0x48>
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <SCH_Update+0x54>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d114      	bne.n	800155c <SCH_Update+0x48>
	{
		if(sTaskList->delay > 0) sTaskList->delay -= 1;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <SCH_Update+0x50>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <SCH_Update+0x36>
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SCH_Update+0x50>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SCH_Update+0x50>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3a01      	subs	r2, #1
 8001548:	60da      	str	r2, [r3, #12]
		if(sTaskList->delay <= 0) sTaskList->run_flag = 1;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SCH_Update+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <SCH_Update+0x48>
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SCH_Update+0x50>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	761a      	strb	r2, [r3, #24]
	}
	timerRun();
 800155c:	f000 f8f0 	bl	8001740 <timerRun>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000c4 	.word	0x200000c4
 8001568:	20000238 	.word	0x20000238

0800156c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	mutex_lock = 1;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <SCH_Dispatch_Tasks+0xa4>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
	while((sTaskList) && (sTaskList->run_flag))
 8001578:	e036      	b.n	80015e8 <SCH_Dispatch_Tasks+0x7c>
	{
		(*sTaskList->funcPointer)();
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4798      	blx	r3
		if(sTaskList->period == 0)
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10d      	bne.n	80015a8 <SCH_Dispatch_Tasks+0x3c>
		{
			struct sTask *toDelete = sTaskList;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	603b      	str	r3, [r7, #0]
			sTaskList = sTaskList->right;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 800159a:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f839 	bl	8001618 <SCH_Delete_Task>
 80015a6:	e01f      	b.n	80015e8 <SCH_Dispatch_Tasks+0x7c>
		}
		else
		{
			struct sTask *toFind = sTaskList;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	607b      	str	r3, [r7, #4]
			sTaskList->right->left = sTaskList->left;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	601a      	str	r2, [r3, #0]
			sTaskList->left->right = sTaskList->right;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6852      	ldr	r2, [r2, #4]
 80015c8:	605a      	str	r2, [r3, #4]
			sTaskList = sTaskList->right;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015d2:	6013      	str	r3, [r2, #0]
			toFind->run_flag = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	761a      	strb	r2, [r3, #24]
			toFind->delay = toFind->period;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60da      	str	r2, [r3, #12]
			SCH_Find_Position(toFind);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe96 	bl	8001314 <SCH_Find_Position>
	while((sTaskList) && (sTaskList->run_flag))
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <SCH_Dispatch_Tasks+0x8e>
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <SCH_Dispatch_Tasks+0xa8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	7e1b      	ldrb	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1bf      	bne.n	800157a <SCH_Dispatch_Tasks+0xe>
		}
	}
	mutex_lock = 0;
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SCH_Dispatch_Tasks+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001600:	2101      	movs	r1, #1
 8001602:	2000      	movs	r0, #0
 8001604:	f000 fe68 	bl	80022d8 <HAL_PWR_EnterSLEEPMode>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000238 	.word	0x20000238
 8001614:	200000c4 	.word	0x200000c4

08001618 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(tracker[index])
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <SCH_Delete_Task+0x58>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01d      	beq.n	8001668 <SCH_Delete_Task+0x50>
	{
		tracker[index] = 0;
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <SCH_Delete_Task+0x58>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		struct sTask *iterator = sTaskList;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <SCH_Delete_Task+0x5c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index)
 800163c:	e002      	b.n	8001644 <SCH_Delete_Task+0x2c>
		{
			iterator = iterator->right;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d1f7      	bne.n	800163e <SCH_Delete_Task+0x26>
		}
		iterator->right->left = iterator->left;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	601a      	str	r2, [r3, #0]
		iterator->left->right = iterator->right;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	6852      	ldr	r2, [r2, #4]
 8001660:	605a      	str	r2, [r3, #4]
		free(iterator);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f003 f81e 	bl	80046a4 <free>
	}
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000023c 	.word	0x2000023c
 8001674:	200000c4 	.word	0x200000c4

08001678 <adding_time>:
int timer4_flag = 0;

int TIMER_CYCLE = 10;

void adding_time(int extra_time)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (timer2_counter > 0)
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <adding_time+0x28>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dd05      	ble.n	8001694 <adding_time+0x1c>
	{
		timer2_counter += extra_time;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <adding_time+0x28>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <adding_time+0x28>)
 8001692:	6013      	str	r3, [r2, #0]
	}
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200000d8 	.word	0x200000d8

080016a4 <setTimer1>:

void setTimer1(int duration)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <setTimer1+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <setTimer1+0x2c>)
 80016b8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <setTimer1+0x30>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2000001c 	.word	0x2000001c
 80016d0:	200000d0 	.word	0x200000d0
 80016d4:	200000d4 	.word	0x200000d4

080016d8 <setTimer2>:

void setTimer2(int duration)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <setTimer2+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <setTimer2+0x2c>)
 80016ec:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <setTimer2+0x30>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000001c 	.word	0x2000001c
 8001704:	200000d8 	.word	0x200000d8
 8001708:	200000dc 	.word	0x200000dc

0800170c <setTimer4>:
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <setTimer4+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb92 f3f3 	sdiv	r3, r2, r3
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <setTimer4+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <setTimer4+0x30>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000001c 	.word	0x2000001c
 8001738:	200000e8 	.word	0x200000e8
 800173c:	200000ec 	.word	0x200000ec

08001740 <timerRun>:

void timerRun()
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	if(timer0_counter > 0)
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <timerRun+0xac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	dd0b      	ble.n	8001764 <timerRun+0x24>
	{
		timer0_counter--;
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <timerRun+0xac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	4a26      	ldr	r2, [pc, #152]	; (80017ec <timerRun+0xac>)
 8001754:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0)
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <timerRun+0xac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <timerRun+0x24>
		{
			timer0_flag = 1;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <timerRun+0xb0>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <timerRun+0xb4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd0b      	ble.n	8001784 <timerRun+0x44>
	{
		timer1_counter--;
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <timerRun+0xb4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <timerRun+0xb4>)
 8001774:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0)
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <timerRun+0xb4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <timerRun+0x44>
		{
			timer1_flag = 1;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <timerRun+0xb8>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <timerRun+0xbc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd0b      	ble.n	80017a4 <timerRun+0x64>
	{
		timer2_counter--;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <timerRun+0xbc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <timerRun+0xbc>)
 8001794:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0)
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <timerRun+0xbc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <timerRun+0x64>
		{
			timer2_flag = 1;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <timerRun+0xc0>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <timerRun+0xc4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd0b      	ble.n	80017c4 <timerRun+0x84>
	{
		timer3_counter--;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <timerRun+0xc4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <timerRun+0xc4>)
 80017b4:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0)
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <timerRun+0xc4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <timerRun+0x84>
		{
			timer3_flag = 1;
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <timerRun+0xc8>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <timerRun+0xcc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dd0b      	ble.n	80017e4 <timerRun+0xa4>
	{
		timer4_counter--;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <timerRun+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <timerRun+0xcc>)
 80017d4:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <timerRun+0xcc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <timerRun+0xa4>
		{
			timer4_flag = 1;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <timerRun+0xd0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	200000c8 	.word	0x200000c8
 80017f0:	200000cc 	.word	0x200000cc
 80017f4:	200000d0 	.word	0x200000d0
 80017f8:	200000d4 	.word	0x200000d4
 80017fc:	200000d8 	.word	0x200000d8
 8001800:	200000dc 	.word	0x200000dc
 8001804:	200000e0 	.word	0x200000e0
 8001808:	200000e4 	.word	0x200000e4
 800180c:	200000e8 	.word	0x200000e8
 8001810:	200000ec 	.word	0x200000ec

08001814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_MspInit+0x5c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_MspInit+0x5c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_MspInit+0x5c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_MspInit+0x60>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_MspInit+0x60>)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000

08001878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d114      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201c      	movs	r0, #28
 80018a8:	f000 fa79 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ac:	201c      	movs	r0, #28
 80018ae:	f000 fa92 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b2:	e010      	b.n	80018d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10b      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40000400 	.word	0x40000400

080018e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_MspPostInit+0x58>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d117      	bne.n	8001938 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_TIM_MspPostInit+0x5c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_TIM_MspPostInit+0x5c>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_TIM_MspPostInit+0x5c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001920:	2340      	movs	r3, #64	; 0x40
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2302      	movs	r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_TIM_MspPostInit+0x60>)
 8001934:	f000 fb1c 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40000400 	.word	0x40000400
 8001944:	40021000 	.word	0x40021000
 8001948:	40010800 	.word	0x40010800

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_UART_MspInit+0x98>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d137      	bne.n	80019dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001976:	61d3      	str	r3, [r2, #28]
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800199c:	2304      	movs	r3, #4
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <HAL_UART_MspInit+0xa0>)
 80019b0:	f000 fade 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b4:	2308      	movs	r3, #8
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <HAL_UART_MspInit+0xa0>)
 80019c8:	f000 fad2 	bl	8001f70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2026      	movs	r0, #38	; 0x26
 80019d2:	f000 f9e4 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d6:	2026      	movs	r0, #38	; 0x26
 80019d8:	f000 f9fd 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40004400 	.word	0x40004400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a36:	f000 f8bf 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM2_IRQHandler+0x10>)
 8001a46:	f001 fa0d 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000144 	.word	0x20000144

08001a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <USART2_IRQHandler+0x10>)
 8001a5a:	f002 f8a1 	bl	8003ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000018c 	.word	0x2000018c

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f002 fdd2 	bl	8004640 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20005000 	.word	0x20005000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	200000f0 	.word	0x200000f0
 8001ad0:	20000278 	.word	0x20000278

08001ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae0:	f7ff fff8 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ae6:	490c      	ldr	r1, [pc, #48]	; (8001b18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001afc:	4c09      	ldr	r4, [pc, #36]	; (8001b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f002 fd9f 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0e:	f7fe fc1b 	bl	8000348 <main>
  bx lr
 8001b12:	4770      	bx	lr
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b1c:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 8001b20:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b24:	20000278 	.word	0x20000278

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f923 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fe64 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f93b 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f903 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000020 	.word	0x20000020
 8001bb0:	20000028 	.word	0x20000028
 8001bb4:	20000024 	.word	0x20000024

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x1c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000028 	.word	0x20000028
 8001bd8:	20000264 	.word	0x20000264

08001bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_GetTick+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000264 	.word	0x20000264

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4906      	ldr	r1, [pc, #24]	; (8001c88 <__NVIC_EnableIRQ+0x34>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff2d 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff42 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff35 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d008      	beq.n	8001e34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e020      	b.n	8001e76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020e 	bic.w	r2, r2, #14
 8001e42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d005      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e051      	b.n	8001f48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020e 	bic.w	r2, r2, #14
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <HAL_DMA_Abort_IT+0xd4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d029      	beq.n	8001f22 <HAL_DMA_Abort_IT+0xa2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_DMA_Abort_IT+0xd8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d022      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x9e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <HAL_DMA_Abort_IT+0xdc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01a      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x98>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_DMA_Abort_IT+0xe0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d012      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x92>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_DMA_Abort_IT+0xe4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00a      	beq.n	8001f0c <HAL_DMA_Abort_IT+0x8c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_DMA_Abort_IT+0xe8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d102      	bne.n	8001f06 <HAL_DMA_Abort_IT+0x86>
 8001f00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f04:	e00e      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0a:	e00b      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f10:	e008      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f16:	e005      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1c:	e002      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f1e:	2310      	movs	r3, #16
 8001f20:	e000      	b.n	8001f24 <HAL_DMA_Abort_IT+0xa4>
 8001f22:	2301      	movs	r3, #1
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_DMA_Abort_IT+0xec>)
 8001f26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
    } 
  }
  return status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40020008 	.word	0x40020008
 8001f58:	4002001c 	.word	0x4002001c
 8001f5c:	40020030 	.word	0x40020030
 8001f60:	40020044 	.word	0x40020044
 8001f64:	40020058 	.word	0x40020058
 8001f68:	4002006c 	.word	0x4002006c
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b08b      	sub	sp, #44	; 0x2c
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e169      	b.n	8002258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f84:	2201      	movs	r2, #1
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8158 	bne.w	8002252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a9a      	ldr	r2, [pc, #616]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d05e      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fac:	4a98      	ldr	r2, [pc, #608]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d875      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fb2:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d058      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fb8:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d86f      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fbe:	4a96      	ldr	r2, [pc, #600]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d052      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fc4:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d869      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fca:	4a94      	ldr	r2, [pc, #592]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04c      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fd0:	4a92      	ldr	r2, [pc, #584]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d863      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fd6:	4a92      	ldr	r2, [pc, #584]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d046      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fdc:	4a90      	ldr	r2, [pc, #576]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d85d      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d82a      	bhi.n	800203c <HAL_GPIO_Init+0xcc>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d859      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_GPIO_Init+0x80>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	0800206b 	.word	0x0800206b
 8001ff4:	08002045 	.word	0x08002045
 8001ff8:	08002057 	.word	0x08002057
 8001ffc:	08002099 	.word	0x08002099
 8002000:	0800209f 	.word	0x0800209f
 8002004:	0800209f 	.word	0x0800209f
 8002008:	0800209f 	.word	0x0800209f
 800200c:	0800209f 	.word	0x0800209f
 8002010:	0800209f 	.word	0x0800209f
 8002014:	0800209f 	.word	0x0800209f
 8002018:	0800209f 	.word	0x0800209f
 800201c:	0800209f 	.word	0x0800209f
 8002020:	0800209f 	.word	0x0800209f
 8002024:	0800209f 	.word	0x0800209f
 8002028:	0800209f 	.word	0x0800209f
 800202c:	0800209f 	.word	0x0800209f
 8002030:	0800209f 	.word	0x0800209f
 8002034:	0800204d 	.word	0x0800204d
 8002038:	08002061 	.word	0x08002061
 800203c:	4a79      	ldr	r2, [pc, #484]	; (8002224 <HAL_GPIO_Init+0x2b4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002042:	e02c      	b.n	800209e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e029      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	3304      	adds	r3, #4
 8002052:	623b      	str	r3, [r7, #32]
          break;
 8002054:	e024      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	3308      	adds	r3, #8
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e01f      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	330c      	adds	r3, #12
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e01a      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002072:	2304      	movs	r3, #4
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e013      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	611a      	str	r2, [r3, #16]
          break;
 800208a:	e009      	b.n	80020a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	615a      	str	r2, [r3, #20]
          break;
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          break;
 800209e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d801      	bhi.n	80020aa <HAL_GPIO_Init+0x13a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_Init+0x13e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d802      	bhi.n	80020bc <HAL_GPIO_Init+0x14c>
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x152>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	3b08      	subs	r3, #8
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	210f      	movs	r1, #15
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80b1 	beq.w	8002252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_GPIO_Init+0x2bc>)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_GPIO_Init+0x2c0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1ec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_GPIO_Init+0x2c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1e8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <HAL_GPIO_Init+0x2cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1e0>
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002150:	2304      	movs	r3, #4
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 800215c:	2300      	movs	r3, #0
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800216e:	492f      	ldr	r1, [pc, #188]	; (800222c <HAL_GPIO_Init+0x2bc>)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	492c      	ldr	r1, [pc, #176]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4928      	ldr	r1, [pc, #160]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	491e      	ldr	r1, [pc, #120]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4918      	ldr	r1, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4914      	ldr	r1, [pc, #80]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e021      	b.n	8002252 <HAL_GPIO_Init+0x2e2>
 800220e:	bf00      	nop
 8002210:	10320000 	.word	0x10320000
 8002214:	10310000 	.word	0x10310000
 8002218:	10220000 	.word	0x10220000
 800221c:	10210000 	.word	0x10210000
 8002220:	10120000 	.word	0x10120000
 8002224:	10110000 	.word	0x10110000
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
 8002240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	43db      	mvns	r3, r3
 800224c:	4909      	ldr	r1, [pc, #36]	; (8002274 <HAL_GPIO_Init+0x304>)
 800224e:	4013      	ands	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	3301      	adds	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f47f ae8e 	bne.w	8001f84 <HAL_GPIO_Init+0x14>
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	372c      	adds	r7, #44	; 0x2c
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b6:	787b      	ldrb	r3, [r7, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	041a      	lsls	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_PWR_EnterSLEEPMode+0x34>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_PWR_EnterSLEEPMode+0x34>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022f6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80022f8:	e002      	b.n	8002300 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80022fa:	bf40      	sev
    __WFE();
 80022fc:	bf20      	wfe
    __WFE();
 80022fe:	bf20      	wfe
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fbf6 	bl	8001bdc <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff fbf2 	bl	8001bdc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fbe2 	bl	8001bdc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fbde 	bl	8001bdc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff fb97 	bl	8001bdc <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7ff fb93 	bl	8001bdc <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fb76 	bl	8001bdc <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fb72 	bl	8001bdc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7ff fb56 	bl	8001bdc <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff fb52 	bl	8001bdc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 facc 	bl	8002af0 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fb3c 	bl	8001bdc <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff fb38 	bl	8001bdc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7ff faf9 	bl	8001bdc <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7ff faf5 	bl	8001bdc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7ff faa9 	bl	8001bdc <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7ff faa5 	bl	8001bdc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fa93 	bl	8001bdc <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff fa8f 	bl	8001bdc <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff fa63 	bl	8001bdc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7ff fa5f 	bl	8001bdc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff fa33 	bl	8001bdc <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7ff fa2f 	bl	8001bdc <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fa1c 	bl	8001bdc <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff fa18 	bl	8001bdc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7ff f96c 	bl	8001bdc <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7ff f968 	bl	8001bdc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f8ca 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08005198 	.word	0x08005198
 80029dc:	20000020 	.word	0x20000020
 80029e0:	20000024 	.word	0x20000024

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x36>
 8002a12:	e027      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	e027      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0c5b      	lsrs	r3, r3, #17
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e004      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	613b      	str	r3, [r7, #16]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	693b      	ldr	r3, [r7, #16]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	007a1200 	.word	0x007a1200
 8002a80:	080051b0 	.word	0x080051b0
 8002a84:	080051c0 	.word	0x080051c0
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000020 	.word	0x20000020

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	f7ff fff2 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080051a8 	.word	0x080051a8

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080051a8 	.word	0x080051a8

08002af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCC_Delay+0x34>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <RCC_Delay+0x38>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a5b      	lsrs	r3, r3, #9
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b0c:	bf00      	nop
  }
  while (Delay --);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	60fa      	str	r2, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <RCC_Delay+0x1c>
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000020 	.word	0x20000020
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fe90 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 fc30 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e03a      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_Base_Start_IT+0x98>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800

08002c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e041      	b.n	8002d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f839 	bl	8002d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 fb8e 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_TIM_PWM_Start+0x24>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e022      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d109      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x3e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e015      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x58>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e008      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e05e      	b.n	8002e50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x82>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da0:	e013      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x92>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0xa2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	e003      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd7c 	bl	80038d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_TIM_PWM_Start+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_PWM_Start+0x138>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIM_PWM_Start+0xfa>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d009      	beq.n	8002e1a <HAL_TIM_PWM_Start+0xfa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <HAL_TIM_PWM_Start+0x13c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIM_PWM_Start+0xfa>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_TIM_PWM_Start+0x140>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d010      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	e007      	b.n	8002e4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d122      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0202 	mvn.w	r2, #2
 8002e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa76 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa69 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fa78 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa4c 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa3f 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa4e 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa22 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa15 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa24 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f9f8 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9eb 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f9fa 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0201 	mvn.w	r2, #1
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fb76 	bl	80006d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fce9 	bl	80039e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9be 	bl	80033bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fcb4 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ae      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	f200 809f 	bhi.w	80031e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080031e1 	.word	0x080031e1
 80030b0:	080031e1 	.word	0x080031e1
 80030b4:	080031e1 	.word	0x080031e1
 80030b8:	0800311d 	.word	0x0800311d
 80030bc:	080031e1 	.word	0x080031e1
 80030c0:	080031e1 	.word	0x080031e1
 80030c4:	080031e1 	.word	0x080031e1
 80030c8:	0800315f 	.word	0x0800315f
 80030cc:	080031e1 	.word	0x080031e1
 80030d0:	080031e1 	.word	0x080031e1
 80030d4:	080031e1 	.word	0x080031e1
 80030d8:	0800319f 	.word	0x0800319f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f9d6 	bl	8003494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6999      	ldr	r1, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	619a      	str	r2, [r3, #24]
      break;
 800311a:	e064      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fa1c 	bl	8003560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	619a      	str	r2, [r3, #24]
      break;
 800315c:	e043      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fa65 	bl	8003634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0208 	orr.w	r2, r2, #8
 8003178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0204 	bic.w	r2, r2, #4
 8003188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69d9      	ldr	r1, [r3, #28]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	61da      	str	r2, [r3, #28]
      break;
 800319c:	e023      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 faaf 	bl	8003708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	61da      	str	r2, [r3, #28]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
      break;
 80031e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIM_ConfigClockSource+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e0b4      	b.n	800337e <HAL_TIM_ConfigClockSource+0x186>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d03e      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xd4>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	f200 8087 	bhi.w	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	f000 8086 	beq.w	800336a <HAL_TIM_ConfigClockSource+0x172>
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d87f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d01a      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xa6>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d87b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d050      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x11a>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d877      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d03c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d873      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d058      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x13a>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d86f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d064      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d86b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d060      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d867      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05c      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b10      	cmp	r3, #16
 800329a:	d05a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	e062      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f000 faf0 	bl	8003892 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
      break;
 80032ca:	e04f      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f000 fad9 	bl	8003892 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e03c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 fa50 	bl	80037a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2150      	movs	r1, #80	; 0x50
 800330a:	4618      	mov	r0, r3
 800330c:	f000 faa7 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 8003310:	e02c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	f000 fa6e 	bl	8003800 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2160      	movs	r1, #96	; 0x60
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fa97 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 8003330:	e01c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fa30 	bl	80037a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fa87 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 8003350:	e00c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 fa7e 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 8003362:	e003      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e000      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0xbc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <TIM_Base_SetConfig+0xbc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 0201 	bic.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 0302 	bic.w	r3, r3, #2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <TIM_OC1_SetConfig+0xc8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10c      	bne.n	800350a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0308 	bic.w	r3, r3, #8
 80034f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <TIM_OC1_SetConfig+0xc8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d111      	bne.n	8003536 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00

08003560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0210 	bic.w	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0320 	bic.w	r3, r3, #32
 80035aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <TIM_OC2_SetConfig+0xd0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10d      	bne.n	80035dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a14      	ldr	r2, [pc, #80]	; (8003630 <TIM_OC2_SetConfig+0xd0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d113      	bne.n	800360c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00

08003634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800367c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <TIM_OC3_SetConfig+0xd0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <TIM_OC3_SetConfig+0xd0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d113      	bne.n	80036de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00

08003708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <TIM_OC4_SetConfig+0x98>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d109      	bne.n	800377c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00

080037a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f023 030a 	bic.w	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0210 	bic.w	r2, r3, #16
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800382a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	031b      	lsls	r3, r3, #12
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800383c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	f043 0307 	orr.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b087      	sub	sp, #28
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	021a      	lsls	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	609a      	str	r2, [r3, #8]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2201      	movs	r2, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800392c:	2302      	movs	r3, #2
 800392e:	e046      	b.n	80039be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d009      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10c      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e042      	b.n	8003a90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd ff94 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	; 0x24
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fd71 	bl	8004524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d16d      	bne.n	8003b94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Transmit+0x2c>
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e066      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2221      	movs	r2, #33	; 0x21
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fe f881 	bl	8001bdc <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d108      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e003      	b.n	8003b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b0c:	e02a      	b.n	8003b64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 faf9 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e036      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cf      	bne.n	8003b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fac9 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b0ba      	sub	sp, #232	; 0xe8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_UART_IRQHandler+0x66>
 8003bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fbd1 	bl	80043a6 <UART_Receive_IT>
      return;
 8003c04:	e25b      	b.n	80040be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80de 	beq.w	8003dcc <HAL_UART_IRQHandler+0x22c>
 8003c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80d1 	beq.w	8003dcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_UART_IRQHandler+0xae>
 8003c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_UART_IRQHandler+0xd2>
 8003c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f043 0202 	orr.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_UART_IRQHandler+0xf6>
 8003c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f043 0204 	orr.w	r2, r3, #4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x126>
 8003ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 81f2 	beq.w	80040b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x14e>
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb5c 	bl	80043a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <HAL_UART_IRQHandler+0x17a>
 8003d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d04f      	beq.n	8003dba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa66 	bl	80041ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d041      	beq.n	8003db2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1d9      	bne.n	8003d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d013      	beq.n	8003daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	4a7e      	ldr	r2, [pc, #504]	; (8003f80 <HAL_UART_IRQHandler+0x3e0>)
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe f876 	bl	8001e80 <HAL_DMA_Abort_IT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d016      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003da4:	4610      	mov	r0, r2
 8003da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e00e      	b.n	8003dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f99c 	bl	80040e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00a      	b.n	8003dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f998 	bl	80040e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e006      	b.n	8003dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f994 	bl	80040e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003dc6:	e175      	b.n	80040b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	bf00      	nop
    return;
 8003dca:	e173      	b.n	80040b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 814f 	bne.w	8004074 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8148 	beq.w	8004074 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8141 	beq.w	8004074 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80b6 	beq.w	8003f84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8145 	beq.w	80040b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f080 813e 	bcs.w	80040b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	f000 8088 	beq.w	8003f60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1d9      	bne.n	8003e50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ec8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e1      	bne.n	8003e9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3314      	adds	r3, #20
 8003ede:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003efc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003efe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e3      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f42:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e3      	bne.n	8003f1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd ff55 	bl	8001e0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8bf 	bl	80040fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f7c:	e09c      	b.n	80040b8 <HAL_UART_IRQHandler+0x518>
 8003f7e:	bf00      	nop
 8003f80:	080042b1 	.word	0x080042b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 808e 	beq.w	80040bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8089 	beq.w	80040bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fce:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e3      	bne.n	8003faa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60fb      	str	r3, [r7, #12]
   return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800404c:	61fa      	str	r2, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	69b9      	ldr	r1, [r7, #24]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	617b      	str	r3, [r7, #20]
   return(result);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e3      	bne.n	8004028 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f844 	bl	80040fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004072:	e023      	b.n	80040bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <HAL_UART_IRQHandler+0x4f4>
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f923 	bl	80042d8 <UART_Transmit_IT>
    return;
 8004092:	e014      	b.n	80040be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <HAL_UART_IRQHandler+0x51e>
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f962 	bl	8004376 <UART_EndTransmit_IT>
    return;
 80040b2:	e004      	b.n	80040be <HAL_UART_IRQHandler+0x51e>
    return;
 80040b4:	bf00      	nop
 80040b6:	e002      	b.n	80040be <HAL_UART_IRQHandler+0x51e>
      return;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <HAL_UART_IRQHandler+0x51e>
      return;
 80040bc:	bf00      	nop
  }
}
 80040be:	37e8      	adds	r7, #232	; 0xe8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b090      	sub	sp, #64	; 0x40
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004120:	e050      	b.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d04c      	beq.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x30>
 8004130:	f7fd fd54 	bl	8001bdc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800413c:	429a      	cmp	r2, r3
 800413e:	d241      	bcs.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004160:	637a      	str	r2, [r7, #52]	; 0x34
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004194:	623a      	str	r2, [r7, #32]
 8004196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69f9      	ldr	r1, [r7, #28]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e00f      	b.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d09f      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3740      	adds	r7, #64	; 0x40
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b095      	sub	sp, #84	; 0x54
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004214:	643a      	str	r2, [r7, #64]	; 0x40
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	61fb      	str	r3, [r7, #28]
   return(result);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d119      	bne.n	8004298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60bb      	str	r3, [r7, #8]
   return(result);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004284:	61ba      	str	r2, [r7, #24]
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	613b      	str	r3, [r7, #16]
   return(result);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042a6:	bf00      	nop
 80042a8:	3754      	adds	r7, #84	; 0x54
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff ff0c 	bl	80040e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b21      	cmp	r3, #33	; 0x21
 80042ea:	d13e      	bne.n	800436a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d114      	bne.n	8004320 <UART_Transmit_IT+0x48>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d110      	bne.n	8004320 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004312:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	1c9a      	adds	r2, r3, #2
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]
 800431e:	e008      	b.n	8004332 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	1c59      	adds	r1, r3, #1
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6211      	str	r1, [r2, #32]
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4619      	mov	r1, r3
 8004340:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004354:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004364:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fe94 	bl	80040c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08c      	sub	sp, #48	; 0x30
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b22      	cmp	r3, #34	; 0x22
 80043b8:	f040 80ae 	bne.w	8004518 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c4:	d117      	bne.n	80043f6 <UART_Receive_IT+0x50>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
 80043f4:	e026      	b.n	8004444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d007      	beq.n	800441a <UART_Receive_IT+0x74>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <UART_Receive_IT+0x82>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e008      	b.n	800443a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004434:	b2da      	uxtb	r2, r3
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29b      	uxth	r3, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4619      	mov	r1, r3
 8004452:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004454:	2b00      	cmp	r3, #0
 8004456:	d15d      	bne.n	8004514 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0220 	bic.w	r2, r2, #32
 8004466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	2b01      	cmp	r3, #1
 800449c:	d135      	bne.n	800450a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	613b      	str	r3, [r7, #16]
   return(result);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f023 0310 	bic.w	r3, r3, #16
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	623a      	str	r2, [r7, #32]
 80044c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	69f9      	ldr	r1, [r7, #28]
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d10a      	bne.n	80044fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fdf9 	bl	80040fa <HAL_UARTEx_RxEventCallback>
 8004508:	e002      	b.n	8004510 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fde3 	bl	80040d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e002      	b.n	800451a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3730      	adds	r7, #48	; 0x30
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800455e:	f023 030c 	bic.w	r3, r3, #12
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	430b      	orrs	r3, r1
 800456a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <UART_SetConfig+0x114>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fa9c 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	e002      	b.n	800459a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fa84 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8004598:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009a      	lsls	r2, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	4a22      	ldr	r2, [pc, #136]	; (800463c <UART_SetConfig+0x118>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	0119      	lsls	r1, r3, #4
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	009a      	lsls	r2, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <UART_SetConfig+0x118>)
 80045d2:	fba3 0302 	umull	r0, r3, r3, r2
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	2064      	movs	r0, #100	; 0x64
 80045da:	fb00 f303 	mul.w	r3, r0, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	3332      	adds	r3, #50	; 0x32
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <UART_SetConfig+0x118>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f0:	4419      	add	r1, r3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fbb2 f2f3 	udiv	r2, r2, r3
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <UART_SetConfig+0x118>)
 800460a:	fba3 0302 	umull	r0, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	3332      	adds	r3, #50	; 0x32
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <UART_SetConfig+0x118>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	440a      	add	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40013800 	.word	0x40013800
 800463c:	51eb851f 	.word	0x51eb851f

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000002c 	.word	0x2000002c

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2600      	movs	r6, #0
 8004650:	4d0c      	ldr	r5, [pc, #48]	; (8004684 <__libc_init_array+0x38>)
 8004652:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	f000 fc6c 	bl	8004f38 <_init>
 8004660:	2600      	movs	r6, #0
 8004662:	4d0a      	ldr	r5, [pc, #40]	; (800468c <__libc_init_array+0x40>)
 8004664:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x44>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	080051f8 	.word	0x080051f8
 8004688:	080051f8 	.word	0x080051f8
 800468c:	080051f8 	.word	0x080051f8
 8004690:	080051fc 	.word	0x080051fc

08004694 <malloc>:
 8004694:	4b02      	ldr	r3, [pc, #8]	; (80046a0 <malloc+0xc>)
 8004696:	4601      	mov	r1, r0
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	f000 b85f 	b.w	800475c <_malloc_r>
 800469e:	bf00      	nop
 80046a0:	2000002c 	.word	0x2000002c

080046a4 <free>:
 80046a4:	4b02      	ldr	r3, [pc, #8]	; (80046b0 <free+0xc>)
 80046a6:	4601      	mov	r1, r0
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f000 b80b 	b.w	80046c4 <_free_r>
 80046ae:	bf00      	nop
 80046b0:	2000002c 	.word	0x2000002c

080046b4 <memset>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	4402      	add	r2, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <_free_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4605      	mov	r5, r0
 80046c8:	2900      	cmp	r1, #0
 80046ca:	d043      	beq.n	8004754 <_free_r+0x90>
 80046cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d0:	1f0c      	subs	r4, r1, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bfb8      	it	lt
 80046d6:	18e4      	addlt	r4, r4, r3
 80046d8:	f000 f8ca 	bl	8004870 <__malloc_lock>
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <_free_r+0x94>)
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	4610      	mov	r0, r2
 80046e2:	b933      	cbnz	r3, 80046f2 <_free_r+0x2e>
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	6014      	str	r4, [r2, #0]
 80046e8:	4628      	mov	r0, r5
 80046ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ee:	f000 b8c5 	b.w	800487c <__malloc_unlock>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d90a      	bls.n	800470c <_free_r+0x48>
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	1862      	adds	r2, r4, r1
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bf01      	itttt	eq
 80046fe:	681a      	ldreq	r2, [r3, #0]
 8004700:	685b      	ldreq	r3, [r3, #4]
 8004702:	1852      	addeq	r2, r2, r1
 8004704:	6022      	streq	r2, [r4, #0]
 8004706:	6063      	str	r3, [r4, #4]
 8004708:	6004      	str	r4, [r0, #0]
 800470a:	e7ed      	b.n	80046e8 <_free_r+0x24>
 800470c:	461a      	mov	r2, r3
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b10b      	cbz	r3, 8004716 <_free_r+0x52>
 8004712:	42a3      	cmp	r3, r4
 8004714:	d9fa      	bls.n	800470c <_free_r+0x48>
 8004716:	6811      	ldr	r1, [r2, #0]
 8004718:	1850      	adds	r0, r2, r1
 800471a:	42a0      	cmp	r0, r4
 800471c:	d10b      	bne.n	8004736 <_free_r+0x72>
 800471e:	6820      	ldr	r0, [r4, #0]
 8004720:	4401      	add	r1, r0
 8004722:	1850      	adds	r0, r2, r1
 8004724:	4283      	cmp	r3, r0
 8004726:	6011      	str	r1, [r2, #0]
 8004728:	d1de      	bne.n	80046e8 <_free_r+0x24>
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4401      	add	r1, r0
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	6053      	str	r3, [r2, #4]
 8004734:	e7d8      	b.n	80046e8 <_free_r+0x24>
 8004736:	d902      	bls.n	800473e <_free_r+0x7a>
 8004738:	230c      	movs	r3, #12
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	e7d4      	b.n	80046e8 <_free_r+0x24>
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	1821      	adds	r1, r4, r0
 8004742:	428b      	cmp	r3, r1
 8004744:	bf01      	itttt	eq
 8004746:	6819      	ldreq	r1, [r3, #0]
 8004748:	685b      	ldreq	r3, [r3, #4]
 800474a:	1809      	addeq	r1, r1, r0
 800474c:	6021      	streq	r1, [r4, #0]
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6054      	str	r4, [r2, #4]
 8004752:	e7c9      	b.n	80046e8 <_free_r+0x24>
 8004754:	bd38      	pop	{r3, r4, r5, pc}
 8004756:	bf00      	nop
 8004758:	200000f4 	.word	0x200000f4

0800475c <_malloc_r>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	1ccd      	adds	r5, r1, #3
 8004760:	f025 0503 	bic.w	r5, r5, #3
 8004764:	3508      	adds	r5, #8
 8004766:	2d0c      	cmp	r5, #12
 8004768:	bf38      	it	cc
 800476a:	250c      	movcc	r5, #12
 800476c:	2d00      	cmp	r5, #0
 800476e:	4606      	mov	r6, r0
 8004770:	db01      	blt.n	8004776 <_malloc_r+0x1a>
 8004772:	42a9      	cmp	r1, r5
 8004774:	d903      	bls.n	800477e <_malloc_r+0x22>
 8004776:	230c      	movs	r3, #12
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	2000      	movs	r0, #0
 800477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477e:	f000 f877 	bl	8004870 <__malloc_lock>
 8004782:	4921      	ldr	r1, [pc, #132]	; (8004808 <_malloc_r+0xac>)
 8004784:	680a      	ldr	r2, [r1, #0]
 8004786:	4614      	mov	r4, r2
 8004788:	b99c      	cbnz	r4, 80047b2 <_malloc_r+0x56>
 800478a:	4f20      	ldr	r7, [pc, #128]	; (800480c <_malloc_r+0xb0>)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b923      	cbnz	r3, 800479a <_malloc_r+0x3e>
 8004790:	4621      	mov	r1, r4
 8004792:	4630      	mov	r0, r6
 8004794:	f000 f83c 	bl	8004810 <_sbrk_r>
 8004798:	6038      	str	r0, [r7, #0]
 800479a:	4629      	mov	r1, r5
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f837 	bl	8004810 <_sbrk_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	d123      	bne.n	80047ee <_malloc_r+0x92>
 80047a6:	230c      	movs	r3, #12
 80047a8:	4630      	mov	r0, r6
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f000 f866 	bl	800487c <__malloc_unlock>
 80047b0:	e7e3      	b.n	800477a <_malloc_r+0x1e>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	1b5b      	subs	r3, r3, r5
 80047b6:	d417      	bmi.n	80047e8 <_malloc_r+0x8c>
 80047b8:	2b0b      	cmp	r3, #11
 80047ba:	d903      	bls.n	80047c4 <_malloc_r+0x68>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	441c      	add	r4, r3
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	e004      	b.n	80047ce <_malloc_r+0x72>
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	42a2      	cmp	r2, r4
 80047c8:	bf0c      	ite	eq
 80047ca:	600b      	streq	r3, [r1, #0]
 80047cc:	6053      	strne	r3, [r2, #4]
 80047ce:	4630      	mov	r0, r6
 80047d0:	f000 f854 	bl	800487c <__malloc_unlock>
 80047d4:	f104 000b 	add.w	r0, r4, #11
 80047d8:	1d23      	adds	r3, r4, #4
 80047da:	f020 0007 	bic.w	r0, r0, #7
 80047de:	1ac2      	subs	r2, r0, r3
 80047e0:	d0cc      	beq.n	800477c <_malloc_r+0x20>
 80047e2:	1a1b      	subs	r3, r3, r0
 80047e4:	50a3      	str	r3, [r4, r2]
 80047e6:	e7c9      	b.n	800477c <_malloc_r+0x20>
 80047e8:	4622      	mov	r2, r4
 80047ea:	6864      	ldr	r4, [r4, #4]
 80047ec:	e7cc      	b.n	8004788 <_malloc_r+0x2c>
 80047ee:	1cc4      	adds	r4, r0, #3
 80047f0:	f024 0403 	bic.w	r4, r4, #3
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d0e3      	beq.n	80047c0 <_malloc_r+0x64>
 80047f8:	1a21      	subs	r1, r4, r0
 80047fa:	4630      	mov	r0, r6
 80047fc:	f000 f808 	bl	8004810 <_sbrk_r>
 8004800:	3001      	adds	r0, #1
 8004802:	d1dd      	bne.n	80047c0 <_malloc_r+0x64>
 8004804:	e7cf      	b.n	80047a6 <_malloc_r+0x4a>
 8004806:	bf00      	nop
 8004808:	200000f4 	.word	0x200000f4
 800480c:	200000f8 	.word	0x200000f8

08004810 <_sbrk_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	2300      	movs	r3, #0
 8004814:	4d05      	ldr	r5, [pc, #20]	; (800482c <_sbrk_r+0x1c>)
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fd f924 	bl	8001a68 <_sbrk>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_sbrk_r+0x1a>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_sbrk_r+0x1a>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	20000268 	.word	0x20000268

08004830 <siprintf>:
 8004830:	b40e      	push	{r1, r2, r3}
 8004832:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004836:	b500      	push	{lr}
 8004838:	b09c      	sub	sp, #112	; 0x70
 800483a:	ab1d      	add	r3, sp, #116	; 0x74
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	9006      	str	r0, [sp, #24]
 8004840:	9107      	str	r1, [sp, #28]
 8004842:	9104      	str	r1, [sp, #16]
 8004844:	4808      	ldr	r0, [pc, #32]	; (8004868 <siprintf+0x38>)
 8004846:	4909      	ldr	r1, [pc, #36]	; (800486c <siprintf+0x3c>)
 8004848:	f853 2b04 	ldr.w	r2, [r3], #4
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	a902      	add	r1, sp, #8
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	f000 f874 	bl	8004940 <_svfiprintf_r>
 8004858:	2200      	movs	r2, #0
 800485a:	9b02      	ldr	r3, [sp, #8]
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	b01c      	add	sp, #112	; 0x70
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b003      	add	sp, #12
 8004866:	4770      	bx	lr
 8004868:	2000002c 	.word	0x2000002c
 800486c:	ffff0208 	.word	0xffff0208

08004870 <__malloc_lock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_lock+0x8>)
 8004872:	f000 bafb 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	20000270 	.word	0x20000270

0800487c <__malloc_unlock>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__malloc_unlock+0x8>)
 800487e:	f000 baf6 	b.w	8004e6e <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	20000270 	.word	0x20000270

08004888 <__ssputs_r>:
 8004888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	688e      	ldr	r6, [r1, #8]
 800488e:	4682      	mov	sl, r0
 8004890:	429e      	cmp	r6, r3
 8004892:	460c      	mov	r4, r1
 8004894:	4690      	mov	r8, r2
 8004896:	461f      	mov	r7, r3
 8004898:	d838      	bhi.n	800490c <__ssputs_r+0x84>
 800489a:	898a      	ldrh	r2, [r1, #12]
 800489c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048a0:	d032      	beq.n	8004908 <__ssputs_r+0x80>
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	6909      	ldr	r1, [r1, #16]
 80048a6:	3301      	adds	r3, #1
 80048a8:	eba5 0901 	sub.w	r9, r5, r1
 80048ac:	6965      	ldr	r5, [r4, #20]
 80048ae:	444b      	add	r3, r9
 80048b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048b8:	106d      	asrs	r5, r5, #1
 80048ba:	429d      	cmp	r5, r3
 80048bc:	bf38      	it	cc
 80048be:	461d      	movcc	r5, r3
 80048c0:	0553      	lsls	r3, r2, #21
 80048c2:	d531      	bpl.n	8004928 <__ssputs_r+0xa0>
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7ff ff49 	bl	800475c <_malloc_r>
 80048ca:	4606      	mov	r6, r0
 80048cc:	b950      	cbnz	r0, 80048e4 <__ssputs_r+0x5c>
 80048ce:	230c      	movs	r3, #12
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	f8ca 3000 	str.w	r3, [sl]
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e4:	464a      	mov	r2, r9
 80048e6:	6921      	ldr	r1, [r4, #16]
 80048e8:	f000 fad0 	bl	8004e8c <memcpy>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	6126      	str	r6, [r4, #16]
 80048fa:	444e      	add	r6, r9
 80048fc:	6026      	str	r6, [r4, #0]
 80048fe:	463e      	mov	r6, r7
 8004900:	6165      	str	r5, [r4, #20]
 8004902:	eba5 0509 	sub.w	r5, r5, r9
 8004906:	60a5      	str	r5, [r4, #8]
 8004908:	42be      	cmp	r6, r7
 800490a:	d900      	bls.n	800490e <__ssputs_r+0x86>
 800490c:	463e      	mov	r6, r7
 800490e:	4632      	mov	r2, r6
 8004910:	4641      	mov	r1, r8
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	f000 fac8 	bl	8004ea8 <memmove>
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	1b9b      	subs	r3, r3, r6
 800491e:	4432      	add	r2, r6
 8004920:	2000      	movs	r0, #0
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	e7db      	b.n	80048e0 <__ssputs_r+0x58>
 8004928:	462a      	mov	r2, r5
 800492a:	f000 fad7 	bl	8004edc <_realloc_r>
 800492e:	4606      	mov	r6, r0
 8004930:	2800      	cmp	r0, #0
 8004932:	d1e1      	bne.n	80048f8 <__ssputs_r+0x70>
 8004934:	4650      	mov	r0, sl
 8004936:	6921      	ldr	r1, [r4, #16]
 8004938:	f7ff fec4 	bl	80046c4 <_free_r>
 800493c:	e7c7      	b.n	80048ce <__ssputs_r+0x46>
	...

08004940 <_svfiprintf_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4698      	mov	r8, r3
 8004946:	898b      	ldrh	r3, [r1, #12]
 8004948:	4607      	mov	r7, r0
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	460d      	mov	r5, r1
 800494e:	4614      	mov	r4, r2
 8004950:	b09d      	sub	sp, #116	; 0x74
 8004952:	d50e      	bpl.n	8004972 <_svfiprintf_r+0x32>
 8004954:	690b      	ldr	r3, [r1, #16]
 8004956:	b963      	cbnz	r3, 8004972 <_svfiprintf_r+0x32>
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	f7ff feff 	bl	800475c <_malloc_r>
 800495e:	6028      	str	r0, [r5, #0]
 8004960:	6128      	str	r0, [r5, #16]
 8004962:	b920      	cbnz	r0, 800496e <_svfiprintf_r+0x2e>
 8004964:	230c      	movs	r3, #12
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e0d1      	b.n	8004b12 <_svfiprintf_r+0x1d2>
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	616b      	str	r3, [r5, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	2320      	movs	r3, #32
 8004978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800497c:	2330      	movs	r3, #48	; 0x30
 800497e:	f04f 0901 	mov.w	r9, #1
 8004982:	f8cd 800c 	str.w	r8, [sp, #12]
 8004986:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b2c <_svfiprintf_r+0x1ec>
 800498a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800498e:	4623      	mov	r3, r4
 8004990:	469a      	mov	sl, r3
 8004992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004996:	b10a      	cbz	r2, 800499c <_svfiprintf_r+0x5c>
 8004998:	2a25      	cmp	r2, #37	; 0x25
 800499a:	d1f9      	bne.n	8004990 <_svfiprintf_r+0x50>
 800499c:	ebba 0b04 	subs.w	fp, sl, r4
 80049a0:	d00b      	beq.n	80049ba <_svfiprintf_r+0x7a>
 80049a2:	465b      	mov	r3, fp
 80049a4:	4622      	mov	r2, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	4638      	mov	r0, r7
 80049aa:	f7ff ff6d 	bl	8004888 <__ssputs_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	f000 80aa 	beq.w	8004b08 <_svfiprintf_r+0x1c8>
 80049b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b6:	445a      	add	r2, fp
 80049b8:	9209      	str	r2, [sp, #36]	; 0x24
 80049ba:	f89a 3000 	ldrb.w	r3, [sl]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80a2 	beq.w	8004b08 <_svfiprintf_r+0x1c8>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ce:	f10a 0a01 	add.w	sl, sl, #1
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	9307      	str	r3, [sp, #28]
 80049d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049da:	931a      	str	r3, [sp, #104]	; 0x68
 80049dc:	4654      	mov	r4, sl
 80049de:	2205      	movs	r2, #5
 80049e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e4:	4851      	ldr	r0, [pc, #324]	; (8004b2c <_svfiprintf_r+0x1ec>)
 80049e6:	f000 fa43 	bl	8004e70 <memchr>
 80049ea:	9a04      	ldr	r2, [sp, #16]
 80049ec:	b9d8      	cbnz	r0, 8004a26 <_svfiprintf_r+0xe6>
 80049ee:	06d0      	lsls	r0, r2, #27
 80049f0:	bf44      	itt	mi
 80049f2:	2320      	movmi	r3, #32
 80049f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f8:	0711      	lsls	r1, r2, #28
 80049fa:	bf44      	itt	mi
 80049fc:	232b      	movmi	r3, #43	; 0x2b
 80049fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a02:	f89a 3000 	ldrb.w	r3, [sl]
 8004a06:	2b2a      	cmp	r3, #42	; 0x2a
 8004a08:	d015      	beq.n	8004a36 <_svfiprintf_r+0xf6>
 8004a0a:	4654      	mov	r4, sl
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f04f 0c0a 	mov.w	ip, #10
 8004a12:	9a07      	ldr	r2, [sp, #28]
 8004a14:	4621      	mov	r1, r4
 8004a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a1a:	3b30      	subs	r3, #48	; 0x30
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d94e      	bls.n	8004abe <_svfiprintf_r+0x17e>
 8004a20:	b1b0      	cbz	r0, 8004a50 <_svfiprintf_r+0x110>
 8004a22:	9207      	str	r2, [sp, #28]
 8004a24:	e014      	b.n	8004a50 <_svfiprintf_r+0x110>
 8004a26:	eba0 0308 	sub.w	r3, r0, r8
 8004a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	46a2      	mov	sl, r4
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	e7d2      	b.n	80049dc <_svfiprintf_r+0x9c>
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9103      	str	r1, [sp, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfbb      	ittet	lt
 8004a42:	425b      	neglt	r3, r3
 8004a44:	f042 0202 	orrlt.w	r2, r2, #2
 8004a48:	9307      	strge	r3, [sp, #28]
 8004a4a:	9307      	strlt	r3, [sp, #28]
 8004a4c:	bfb8      	it	lt
 8004a4e:	9204      	strlt	r2, [sp, #16]
 8004a50:	7823      	ldrb	r3, [r4, #0]
 8004a52:	2b2e      	cmp	r3, #46	; 0x2e
 8004a54:	d10c      	bne.n	8004a70 <_svfiprintf_r+0x130>
 8004a56:	7863      	ldrb	r3, [r4, #1]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d135      	bne.n	8004ac8 <_svfiprintf_r+0x188>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	3402      	adds	r4, #2
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfb8      	it	lt
 8004a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b3c <_svfiprintf_r+0x1fc>
 8004a74:	2203      	movs	r2, #3
 8004a76:	4650      	mov	r0, sl
 8004a78:	7821      	ldrb	r1, [r4, #0]
 8004a7a:	f000 f9f9 	bl	8004e70 <memchr>
 8004a7e:	b140      	cbz	r0, 8004a92 <_svfiprintf_r+0x152>
 8004a80:	2340      	movs	r3, #64	; 0x40
 8004a82:	eba0 000a 	sub.w	r0, r0, sl
 8004a86:	fa03 f000 	lsl.w	r0, r3, r0
 8004a8a:	9b04      	ldr	r3, [sp, #16]
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	4303      	orrs	r3, r0
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a96:	2206      	movs	r2, #6
 8004a98:	4825      	ldr	r0, [pc, #148]	; (8004b30 <_svfiprintf_r+0x1f0>)
 8004a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a9e:	f000 f9e7 	bl	8004e70 <memchr>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d038      	beq.n	8004b18 <_svfiprintf_r+0x1d8>
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <_svfiprintf_r+0x1f4>)
 8004aa8:	bb1b      	cbnz	r3, 8004af2 <_svfiprintf_r+0x1b2>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	3307      	adds	r3, #7
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	9303      	str	r3, [sp, #12]
 8004ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab8:	4433      	add	r3, r6
 8004aba:	9309      	str	r3, [sp, #36]	; 0x24
 8004abc:	e767      	b.n	800498e <_svfiprintf_r+0x4e>
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac6:	e7a5      	b.n	8004a14 <_svfiprintf_r+0xd4>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f04f 0c0a 	mov.w	ip, #10
 8004ace:	4619      	mov	r1, r3
 8004ad0:	3401      	adds	r4, #1
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ada:	3a30      	subs	r2, #48	; 0x30
 8004adc:	2a09      	cmp	r2, #9
 8004ade:	d903      	bls.n	8004ae8 <_svfiprintf_r+0x1a8>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0c5      	beq.n	8004a70 <_svfiprintf_r+0x130>
 8004ae4:	9105      	str	r1, [sp, #20]
 8004ae6:	e7c3      	b.n	8004a70 <_svfiprintf_r+0x130>
 8004ae8:	4604      	mov	r4, r0
 8004aea:	2301      	movs	r3, #1
 8004aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af0:	e7f0      	b.n	8004ad4 <_svfiprintf_r+0x194>
 8004af2:	ab03      	add	r3, sp, #12
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	462a      	mov	r2, r5
 8004af8:	4638      	mov	r0, r7
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004afc:	a904      	add	r1, sp, #16
 8004afe:	f3af 8000 	nop.w
 8004b02:	1c42      	adds	r2, r0, #1
 8004b04:	4606      	mov	r6, r0
 8004b06:	d1d6      	bne.n	8004ab6 <_svfiprintf_r+0x176>
 8004b08:	89ab      	ldrh	r3, [r5, #12]
 8004b0a:	065b      	lsls	r3, r3, #25
 8004b0c:	f53f af2c 	bmi.w	8004968 <_svfiprintf_r+0x28>
 8004b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b12:	b01d      	add	sp, #116	; 0x74
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b18:	ab03      	add	r3, sp, #12
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4638      	mov	r0, r7
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004b22:	a904      	add	r1, sp, #16
 8004b24:	f000 f87c 	bl	8004c20 <_printf_i>
 8004b28:	e7eb      	b.n	8004b02 <_svfiprintf_r+0x1c2>
 8004b2a:	bf00      	nop
 8004b2c:	080051c2 	.word	0x080051c2
 8004b30:	080051cc 	.word	0x080051cc
 8004b34:	00000000 	.word	0x00000000
 8004b38:	08004889 	.word	0x08004889
 8004b3c:	080051c8 	.word	0x080051c8

08004b40 <_printf_common>:
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	4616      	mov	r6, r2
 8004b46:	4699      	mov	r9, r3
 8004b48:	688a      	ldr	r2, [r1, #8]
 8004b4a:	690b      	ldr	r3, [r1, #16]
 8004b4c:	4607      	mov	r7, r0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bfb8      	it	lt
 8004b52:	4613      	movlt	r3, r2
 8004b54:	6033      	str	r3, [r6, #0]
 8004b56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b60:	b10a      	cbz	r2, 8004b66 <_printf_common+0x26>
 8004b62:	3301      	adds	r3, #1
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	0699      	lsls	r1, r3, #26
 8004b6a:	bf42      	ittt	mi
 8004b6c:	6833      	ldrmi	r3, [r6, #0]
 8004b6e:	3302      	addmi	r3, #2
 8004b70:	6033      	strmi	r3, [r6, #0]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	f015 0506 	ands.w	r5, r5, #6
 8004b78:	d106      	bne.n	8004b88 <_printf_common+0x48>
 8004b7a:	f104 0a19 	add.w	sl, r4, #25
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	6832      	ldr	r2, [r6, #0]
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	42ab      	cmp	r3, r5
 8004b86:	dc28      	bgt.n	8004bda <_printf_common+0x9a>
 8004b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b8c:	1e13      	subs	r3, r2, #0
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	bf18      	it	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	0692      	lsls	r2, r2, #26
 8004b96:	d42d      	bmi.n	8004bf4 <_printf_common+0xb4>
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d020      	beq.n	8004be8 <_printf_common+0xa8>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	68e5      	ldr	r5, [r4, #12]
 8004baa:	f003 0306 	and.w	r3, r3, #6
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	bf18      	it	ne
 8004bb2:	2500      	movne	r5, #0
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	f04f 0600 	mov.w	r6, #0
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	bf08      	it	eq
 8004bbe:	1aad      	subeq	r5, r5, r2
 8004bc0:	6922      	ldr	r2, [r4, #16]
 8004bc2:	bf08      	it	eq
 8004bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bfc4      	itt	gt
 8004bcc:	1a9b      	subgt	r3, r3, r2
 8004bce:	18ed      	addgt	r5, r5, r3
 8004bd0:	341a      	adds	r4, #26
 8004bd2:	42b5      	cmp	r5, r6
 8004bd4:	d11a      	bne.n	8004c0c <_printf_common+0xcc>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e008      	b.n	8004bec <_printf_common+0xac>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4652      	mov	r2, sl
 8004bde:	4649      	mov	r1, r9
 8004be0:	4638      	mov	r0, r7
 8004be2:	47c0      	blx	r8
 8004be4:	3001      	adds	r0, #1
 8004be6:	d103      	bne.n	8004bf0 <_printf_common+0xb0>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	e7c4      	b.n	8004b7e <_printf_common+0x3e>
 8004bf4:	2030      	movs	r0, #48	; 0x30
 8004bf6:	18e1      	adds	r1, r4, r3
 8004bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c02:	4422      	add	r2, r4
 8004c04:	3302      	adds	r3, #2
 8004c06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c0a:	e7c5      	b.n	8004b98 <_printf_common+0x58>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4622      	mov	r2, r4
 8004c10:	4649      	mov	r1, r9
 8004c12:	4638      	mov	r0, r7
 8004c14:	47c0      	blx	r8
 8004c16:	3001      	adds	r0, #1
 8004c18:	d0e6      	beq.n	8004be8 <_printf_common+0xa8>
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7d9      	b.n	8004bd2 <_printf_common+0x92>
	...

08004c20 <_printf_i>:
 8004c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	7e27      	ldrb	r7, [r4, #24]
 8004c28:	4691      	mov	r9, r2
 8004c2a:	2f78      	cmp	r7, #120	; 0x78
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	469a      	mov	sl, r3
 8004c30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c36:	d807      	bhi.n	8004c48 <_printf_i+0x28>
 8004c38:	2f62      	cmp	r7, #98	; 0x62
 8004c3a:	d80a      	bhi.n	8004c52 <_printf_i+0x32>
 8004c3c:	2f00      	cmp	r7, #0
 8004c3e:	f000 80d9 	beq.w	8004df4 <_printf_i+0x1d4>
 8004c42:	2f58      	cmp	r7, #88	; 0x58
 8004c44:	f000 80a4 	beq.w	8004d90 <_printf_i+0x170>
 8004c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c50:	e03a      	b.n	8004cc8 <_printf_i+0xa8>
 8004c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c56:	2b15      	cmp	r3, #21
 8004c58:	d8f6      	bhi.n	8004c48 <_printf_i+0x28>
 8004c5a:	a001      	add	r0, pc, #4	; (adr r0, 8004c60 <_printf_i+0x40>)
 8004c5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004c49 	.word	0x08004c49
 8004c6c:	08004c49 	.word	0x08004c49
 8004c70:	08004c49 	.word	0x08004c49
 8004c74:	08004c49 	.word	0x08004c49
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c49 	.word	0x08004c49
 8004c80:	08004c49 	.word	0x08004c49
 8004c84:	08004c49 	.word	0x08004c49
 8004c88:	08004c49 	.word	0x08004c49
 8004c8c:	08004ddb 	.word	0x08004ddb
 8004c90:	08004cfd 	.word	0x08004cfd
 8004c94:	08004dbd 	.word	0x08004dbd
 8004c98:	08004c49 	.word	0x08004c49
 8004c9c:	08004c49 	.word	0x08004c49
 8004ca0:	08004dfd 	.word	0x08004dfd
 8004ca4:	08004c49 	.word	0x08004c49
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c49 	.word	0x08004c49
 8004cb0:	08004c49 	.word	0x08004c49
 8004cb4:	08004dc5 	.word	0x08004dc5
 8004cb8:	680b      	ldr	r3, [r1, #0]
 8004cba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	600a      	str	r2, [r1, #0]
 8004cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0a4      	b.n	8004e16 <_printf_i+0x1f6>
 8004ccc:	6825      	ldr	r5, [r4, #0]
 8004cce:	6808      	ldr	r0, [r1, #0]
 8004cd0:	062e      	lsls	r6, r5, #24
 8004cd2:	f100 0304 	add.w	r3, r0, #4
 8004cd6:	d50a      	bpl.n	8004cee <_printf_i+0xce>
 8004cd8:	6805      	ldr	r5, [r0, #0]
 8004cda:	600b      	str	r3, [r1, #0]
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	da03      	bge.n	8004ce8 <_printf_i+0xc8>
 8004ce0:	232d      	movs	r3, #45	; 0x2d
 8004ce2:	426d      	negs	r5, r5
 8004ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce8:	230a      	movs	r3, #10
 8004cea:	485e      	ldr	r0, [pc, #376]	; (8004e64 <_printf_i+0x244>)
 8004cec:	e019      	b.n	8004d22 <_printf_i+0x102>
 8004cee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cf2:	6805      	ldr	r5, [r0, #0]
 8004cf4:	600b      	str	r3, [r1, #0]
 8004cf6:	bf18      	it	ne
 8004cf8:	b22d      	sxthne	r5, r5
 8004cfa:	e7ef      	b.n	8004cdc <_printf_i+0xbc>
 8004cfc:	680b      	ldr	r3, [r1, #0]
 8004cfe:	6825      	ldr	r5, [r4, #0]
 8004d00:	1d18      	adds	r0, r3, #4
 8004d02:	6008      	str	r0, [r1, #0]
 8004d04:	0628      	lsls	r0, r5, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0xec>
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0xf2>
 8004d0c:	0669      	lsls	r1, r5, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0xe8>
 8004d10:	881d      	ldrh	r5, [r3, #0]
 8004d12:	2f6f      	cmp	r7, #111	; 0x6f
 8004d14:	bf0c      	ite	eq
 8004d16:	2308      	moveq	r3, #8
 8004d18:	230a      	movne	r3, #10
 8004d1a:	4852      	ldr	r0, [pc, #328]	; (8004e64 <_printf_i+0x244>)
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d22:	6866      	ldr	r6, [r4, #4]
 8004d24:	2e00      	cmp	r6, #0
 8004d26:	bfa8      	it	ge
 8004d28:	6821      	ldrge	r1, [r4, #0]
 8004d2a:	60a6      	str	r6, [r4, #8]
 8004d2c:	bfa4      	itt	ge
 8004d2e:	f021 0104 	bicge.w	r1, r1, #4
 8004d32:	6021      	strge	r1, [r4, #0]
 8004d34:	b90d      	cbnz	r5, 8004d3a <_printf_i+0x11a>
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	d04d      	beq.n	8004dd6 <_printf_i+0x1b6>
 8004d3a:	4616      	mov	r6, r2
 8004d3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d40:	fb03 5711 	mls	r7, r3, r1, r5
 8004d44:	5dc7      	ldrb	r7, [r0, r7]
 8004d46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d4a:	462f      	mov	r7, r5
 8004d4c:	42bb      	cmp	r3, r7
 8004d4e:	460d      	mov	r5, r1
 8004d50:	d9f4      	bls.n	8004d3c <_printf_i+0x11c>
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d10b      	bne.n	8004d6e <_printf_i+0x14e>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	07df      	lsls	r7, r3, #31
 8004d5a:	d508      	bpl.n	8004d6e <_printf_i+0x14e>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	6861      	ldr	r1, [r4, #4]
 8004d60:	4299      	cmp	r1, r3
 8004d62:	bfde      	ittt	le
 8004d64:	2330      	movle	r3, #48	; 0x30
 8004d66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d6e:	1b92      	subs	r2, r2, r6
 8004d70:	6122      	str	r2, [r4, #16]
 8004d72:	464b      	mov	r3, r9
 8004d74:	4621      	mov	r1, r4
 8004d76:	4640      	mov	r0, r8
 8004d78:	f8cd a000 	str.w	sl, [sp]
 8004d7c:	aa03      	add	r2, sp, #12
 8004d7e:	f7ff fedf 	bl	8004b40 <_printf_common>
 8004d82:	3001      	adds	r0, #1
 8004d84:	d14c      	bne.n	8004e20 <_printf_i+0x200>
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	b004      	add	sp, #16
 8004d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d90:	4834      	ldr	r0, [pc, #208]	; (8004e64 <_printf_i+0x244>)
 8004d92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d96:	680e      	ldr	r6, [r1, #0]
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d9e:	061f      	lsls	r7, r3, #24
 8004da0:	600e      	str	r6, [r1, #0]
 8004da2:	d514      	bpl.n	8004dce <_printf_i+0x1ae>
 8004da4:	07d9      	lsls	r1, r3, #31
 8004da6:	bf44      	itt	mi
 8004da8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dac:	6023      	strmi	r3, [r4, #0]
 8004dae:	b91d      	cbnz	r5, 8004db8 <_printf_i+0x198>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	2310      	movs	r3, #16
 8004dba:	e7af      	b.n	8004d1c <_printf_i+0xfc>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	f043 0320 	orr.w	r3, r3, #32
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	2378      	movs	r3, #120	; 0x78
 8004dc6:	4828      	ldr	r0, [pc, #160]	; (8004e68 <_printf_i+0x248>)
 8004dc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dcc:	e7e3      	b.n	8004d96 <_printf_i+0x176>
 8004dce:	065e      	lsls	r6, r3, #25
 8004dd0:	bf48      	it	mi
 8004dd2:	b2ad      	uxthmi	r5, r5
 8004dd4:	e7e6      	b.n	8004da4 <_printf_i+0x184>
 8004dd6:	4616      	mov	r6, r2
 8004dd8:	e7bb      	b.n	8004d52 <_printf_i+0x132>
 8004dda:	680b      	ldr	r3, [r1, #0]
 8004ddc:	6826      	ldr	r6, [r4, #0]
 8004dde:	1d1d      	adds	r5, r3, #4
 8004de0:	6960      	ldr	r0, [r4, #20]
 8004de2:	600d      	str	r5, [r1, #0]
 8004de4:	0635      	lsls	r5, r6, #24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	d501      	bpl.n	8004dee <_printf_i+0x1ce>
 8004dea:	6018      	str	r0, [r3, #0]
 8004dec:	e002      	b.n	8004df4 <_printf_i+0x1d4>
 8004dee:	0671      	lsls	r1, r6, #25
 8004df0:	d5fb      	bpl.n	8004dea <_printf_i+0x1ca>
 8004df2:	8018      	strh	r0, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	4616      	mov	r6, r2
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	e7ba      	b.n	8004d72 <_printf_i+0x152>
 8004dfc:	680b      	ldr	r3, [r1, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	600a      	str	r2, [r1, #0]
 8004e02:	681e      	ldr	r6, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4630      	mov	r0, r6
 8004e08:	6862      	ldr	r2, [r4, #4]
 8004e0a:	f000 f831 	bl	8004e70 <memchr>
 8004e0e:	b108      	cbz	r0, 8004e14 <_printf_i+0x1f4>
 8004e10:	1b80      	subs	r0, r0, r6
 8004e12:	6060      	str	r0, [r4, #4]
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1e:	e7a8      	b.n	8004d72 <_printf_i+0x152>
 8004e20:	4632      	mov	r2, r6
 8004e22:	4649      	mov	r1, r9
 8004e24:	4640      	mov	r0, r8
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	47d0      	blx	sl
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d0ab      	beq.n	8004d86 <_printf_i+0x166>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	079b      	lsls	r3, r3, #30
 8004e32:	d413      	bmi.n	8004e5c <_printf_i+0x23c>
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	bfb8      	it	lt
 8004e3c:	4618      	movlt	r0, r3
 8004e3e:	e7a4      	b.n	8004d8a <_printf_i+0x16a>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4632      	mov	r2, r6
 8004e44:	4649      	mov	r1, r9
 8004e46:	4640      	mov	r0, r8
 8004e48:	47d0      	blx	sl
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d09b      	beq.n	8004d86 <_printf_i+0x166>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	9903      	ldr	r1, [sp, #12]
 8004e54:	1a5b      	subs	r3, r3, r1
 8004e56:	42ab      	cmp	r3, r5
 8004e58:	dcf2      	bgt.n	8004e40 <_printf_i+0x220>
 8004e5a:	e7eb      	b.n	8004e34 <_printf_i+0x214>
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	f104 0619 	add.w	r6, r4, #25
 8004e62:	e7f5      	b.n	8004e50 <_printf_i+0x230>
 8004e64:	080051d3 	.word	0x080051d3
 8004e68:	080051e4 	.word	0x080051e4

08004e6c <__retarget_lock_acquire_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <__retarget_lock_release_recursive>:
 8004e6e:	4770      	bx	lr

08004e70 <memchr>:
 8004e70:	4603      	mov	r3, r0
 8004e72:	b510      	push	{r4, lr}
 8004e74:	b2c9      	uxtb	r1, r1
 8004e76:	4402      	add	r2, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	d101      	bne.n	8004e82 <memchr+0x12>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e003      	b.n	8004e8a <memchr+0x1a>
 8004e82:	7804      	ldrb	r4, [r0, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	428c      	cmp	r4, r1
 8004e88:	d1f6      	bne.n	8004e78 <memchr+0x8>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <memcpy>:
 8004e8c:	440a      	add	r2, r1
 8004e8e:	4291      	cmp	r1, r2
 8004e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e94:	d100      	bne.n	8004e98 <memcpy+0xc>
 8004e96:	4770      	bx	lr
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e9e:	4291      	cmp	r1, r2
 8004ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea4:	d1f9      	bne.n	8004e9a <memcpy+0xe>
 8004ea6:	bd10      	pop	{r4, pc}

08004ea8 <memmove>:
 8004ea8:	4288      	cmp	r0, r1
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	eb01 0402 	add.w	r4, r1, r2
 8004eb0:	d902      	bls.n	8004eb8 <memmove+0x10>
 8004eb2:	4284      	cmp	r4, r0
 8004eb4:	4623      	mov	r3, r4
 8004eb6:	d807      	bhi.n	8004ec8 <memmove+0x20>
 8004eb8:	1e43      	subs	r3, r0, #1
 8004eba:	42a1      	cmp	r1, r4
 8004ebc:	d008      	beq.n	8004ed0 <memmove+0x28>
 8004ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ec6:	e7f8      	b.n	8004eba <memmove+0x12>
 8004ec8:	4601      	mov	r1, r0
 8004eca:	4402      	add	r2, r0
 8004ecc:	428a      	cmp	r2, r1
 8004ece:	d100      	bne.n	8004ed2 <memmove+0x2a>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eda:	e7f7      	b.n	8004ecc <memmove+0x24>

08004edc <_realloc_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	4607      	mov	r7, r0
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	460e      	mov	r6, r1
 8004ee4:	b921      	cbnz	r1, 8004ef0 <_realloc_r+0x14>
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004eec:	f7ff bc36 	b.w	800475c <_malloc_r>
 8004ef0:	b922      	cbnz	r2, 8004efc <_realloc_r+0x20>
 8004ef2:	f7ff fbe7 	bl	80046c4 <_free_r>
 8004ef6:	4625      	mov	r5, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efc:	f000 f814 	bl	8004f28 <_malloc_usable_size_r>
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d20f      	bcs.n	8004f24 <_realloc_r+0x48>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4638      	mov	r0, r7
 8004f08:	f7ff fc28 	bl	800475c <_malloc_r>
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0f2      	beq.n	8004ef8 <_realloc_r+0x1c>
 8004f12:	4631      	mov	r1, r6
 8004f14:	4622      	mov	r2, r4
 8004f16:	f7ff ffb9 	bl	8004e8c <memcpy>
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f7ff fbd1 	bl	80046c4 <_free_r>
 8004f22:	e7e9      	b.n	8004ef8 <_realloc_r+0x1c>
 8004f24:	4635      	mov	r5, r6
 8004f26:	e7e7      	b.n	8004ef8 <_realloc_r+0x1c>

08004f28 <_malloc_usable_size_r>:
 8004f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f2c:	1f18      	subs	r0, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bfbc      	itt	lt
 8004f32:	580b      	ldrlt	r3, [r1, r0]
 8004f34:	18c0      	addlt	r0, r0, r3
 8004f36:	4770      	bx	lr

08004f38 <_init>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	bf00      	nop
 8004f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3e:	bc08      	pop	{r3}
 8004f40:	469e      	mov	lr, r3
 8004f42:	4770      	bx	lr

08004f44 <_fini>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	bf00      	nop
 8004f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4a:	bc08      	pop	{r3}
 8004f4c:	469e      	mov	lr, r3
 8004f4e:	4770      	bx	lr
